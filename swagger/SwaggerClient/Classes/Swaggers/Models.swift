// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [CharacterscharacterIdbookmarksTarget]
            Decoders.addDecoder(clazz: [CharacterscharacterIdbookmarksTarget].self) { (source: AnyObject) -> [CharacterscharacterIdbookmarksTarget] in
                return Decoders.decode(clazz: [CharacterscharacterIdbookmarksTarget].self, source: source)
            }
            // Decoder for CharacterscharacterIdbookmarksTarget
            Decoders.addDecoder(clazz: CharacterscharacterIdbookmarksTarget.self) { (source: AnyObject) -> CharacterscharacterIdbookmarksTarget in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CharacterscharacterIdbookmarksTarget()
                instance.coordinates = Decoders.decodeOptional(clazz: CharacterscharacterIdbookmarksTargetCoordinates.self, source: sourceDictionary["coordinates"])
                instance.item = Decoders.decodeOptional(clazz: CharacterscharacterIdbookmarksTargetItem.self, source: sourceDictionary["item"])
                instance.locationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location_id"])
                return instance
            }


            // Decoder for [CharacterscharacterIdbookmarksTargetCoordinates]
            Decoders.addDecoder(clazz: [CharacterscharacterIdbookmarksTargetCoordinates].self) { (source: AnyObject) -> [CharacterscharacterIdbookmarksTargetCoordinates] in
                return Decoders.decode(clazz: [CharacterscharacterIdbookmarksTargetCoordinates].self, source: source)
            }
            // Decoder for CharacterscharacterIdbookmarksTargetCoordinates
            Decoders.addDecoder(clazz: CharacterscharacterIdbookmarksTargetCoordinates.self) { (source: AnyObject) -> CharacterscharacterIdbookmarksTargetCoordinates in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CharacterscharacterIdbookmarksTargetCoordinates()
                instance.x = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["x"])
                instance.y = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["y"])
                instance.z = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["z"])
                return instance
            }


            // Decoder for [CharacterscharacterIdbookmarksTargetItem]
            Decoders.addDecoder(clazz: [CharacterscharacterIdbookmarksTargetItem].self) { (source: AnyObject) -> [CharacterscharacterIdbookmarksTargetItem] in
                return Decoders.decode(clazz: [CharacterscharacterIdbookmarksTargetItem].self, source: source)
            }
            // Decoder for CharacterscharacterIdbookmarksTargetItem
            Decoders.addDecoder(clazz: CharacterscharacterIdbookmarksTargetItem.self) { (source: AnyObject) -> CharacterscharacterIdbookmarksTargetItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CharacterscharacterIdbookmarksTargetItem()
                instance.itemId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["item_id"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [CharacterscharacterIdmailRecipients]
            Decoders.addDecoder(clazz: [CharacterscharacterIdmailRecipients].self) { (source: AnyObject) -> [CharacterscharacterIdmailRecipients] in
                return Decoders.decode(clazz: [CharacterscharacterIdmailRecipients].self, source: source)
            }
            // Decoder for CharacterscharacterIdmailRecipients
            Decoders.addDecoder(clazz: CharacterscharacterIdmailRecipients.self) { (source: AnyObject) -> CharacterscharacterIdmailRecipients in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CharacterscharacterIdmailRecipients()
                instance.recipientId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["recipient_id"])
                instance.recipientType = CharacterscharacterIdmailRecipients.RecipientType(rawValue: (sourceDictionary["recipient_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [CharacterscharacterIdmailRecipients1]
            Decoders.addDecoder(clazz: [CharacterscharacterIdmailRecipients1].self) { (source: AnyObject) -> [CharacterscharacterIdmailRecipients1] in
                return Decoders.decode(clazz: [CharacterscharacterIdmailRecipients1].self, source: source)
            }
            // Decoder for CharacterscharacterIdmailRecipients1
            Decoders.addDecoder(clazz: CharacterscharacterIdmailRecipients1.self) { (source: AnyObject) -> CharacterscharacterIdmailRecipients1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CharacterscharacterIdmailRecipients1()
                instance.recipientId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["recipient_id"])
                instance.recipientType = CharacterscharacterIdmailRecipients1.RecipientType(rawValue: (sourceDictionary["recipient_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [CorporationscorporationIdalliancehistoryAlliance]
            Decoders.addDecoder(clazz: [CorporationscorporationIdalliancehistoryAlliance].self) { (source: AnyObject) -> [CorporationscorporationIdalliancehistoryAlliance] in
                return Decoders.decode(clazz: [CorporationscorporationIdalliancehistoryAlliance].self, source: source)
            }
            // Decoder for CorporationscorporationIdalliancehistoryAlliance
            Decoders.addDecoder(clazz: CorporationscorporationIdalliancehistoryAlliance.self) { (source: AnyObject) -> CorporationscorporationIdalliancehistoryAlliance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CorporationscorporationIdalliancehistoryAlliance()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.isDeleted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_deleted"])
                return instance
            }


            // Decoder for [DeleteCharactersCharacterIdMailMailIdForbidden]
            Decoders.addDecoder(clazz: [DeleteCharactersCharacterIdMailMailIdForbidden].self) { (source: AnyObject) -> [DeleteCharactersCharacterIdMailMailIdForbidden] in
                return Decoders.decode(clazz: [DeleteCharactersCharacterIdMailMailIdForbidden].self, source: source)
            }
            // Decoder for DeleteCharactersCharacterIdMailMailIdForbidden
            Decoders.addDecoder(clazz: DeleteCharactersCharacterIdMailMailIdForbidden.self) { (source: AnyObject) -> DeleteCharactersCharacterIdMailMailIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteCharactersCharacterIdMailMailIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteCharactersCharacterIdMailMailIdInternalServerError]
            Decoders.addDecoder(clazz: [DeleteCharactersCharacterIdMailMailIdInternalServerError].self) { (source: AnyObject) -> [DeleteCharactersCharacterIdMailMailIdInternalServerError] in
                return Decoders.decode(clazz: [DeleteCharactersCharacterIdMailMailIdInternalServerError].self, source: source)
            }
            // Decoder for DeleteCharactersCharacterIdMailMailIdInternalServerError
            Decoders.addDecoder(clazz: DeleteCharactersCharacterIdMailMailIdInternalServerError.self) { (source: AnyObject) -> DeleteCharactersCharacterIdMailMailIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteCharactersCharacterIdMailMailIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdMembersMemberIdForbidden]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdMembersMemberIdForbidden].self) { (source: AnyObject) -> [DeleteFleetsFleetIdMembersMemberIdForbidden] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdMembersMemberIdForbidden].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdMembersMemberIdForbidden
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdMembersMemberIdForbidden.self) { (source: AnyObject) -> DeleteFleetsFleetIdMembersMemberIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdMembersMemberIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdMembersMemberIdInternalServerError]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdMembersMemberIdInternalServerError].self) { (source: AnyObject) -> [DeleteFleetsFleetIdMembersMemberIdInternalServerError] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdMembersMemberIdInternalServerError].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdMembersMemberIdInternalServerError
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdMembersMemberIdInternalServerError.self) { (source: AnyObject) -> DeleteFleetsFleetIdMembersMemberIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdMembersMemberIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdMembersMemberIdNotFound]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdMembersMemberIdNotFound].self) { (source: AnyObject) -> [DeleteFleetsFleetIdMembersMemberIdNotFound] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdMembersMemberIdNotFound].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdMembersMemberIdNotFound
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdMembersMemberIdNotFound.self) { (source: AnyObject) -> DeleteFleetsFleetIdMembersMemberIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdMembersMemberIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdSquadsSquadIdForbidden]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdSquadsSquadIdForbidden].self) { (source: AnyObject) -> [DeleteFleetsFleetIdSquadsSquadIdForbidden] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdSquadsSquadIdForbidden].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdSquadsSquadIdForbidden
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdSquadsSquadIdForbidden.self) { (source: AnyObject) -> DeleteFleetsFleetIdSquadsSquadIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdSquadsSquadIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdSquadsSquadIdInternalServerError]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdSquadsSquadIdInternalServerError].self) { (source: AnyObject) -> [DeleteFleetsFleetIdSquadsSquadIdInternalServerError] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdSquadsSquadIdInternalServerError].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdSquadsSquadIdInternalServerError
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdSquadsSquadIdInternalServerError.self) { (source: AnyObject) -> DeleteFleetsFleetIdSquadsSquadIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdSquadsSquadIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdSquadsSquadIdNotFound]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdSquadsSquadIdNotFound].self) { (source: AnyObject) -> [DeleteFleetsFleetIdSquadsSquadIdNotFound] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdSquadsSquadIdNotFound].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdSquadsSquadIdNotFound
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdSquadsSquadIdNotFound.self) { (source: AnyObject) -> DeleteFleetsFleetIdSquadsSquadIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdSquadsSquadIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdWingsWingIdForbidden]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdWingsWingIdForbidden].self) { (source: AnyObject) -> [DeleteFleetsFleetIdWingsWingIdForbidden] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdWingsWingIdForbidden].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdWingsWingIdForbidden
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdWingsWingIdForbidden.self) { (source: AnyObject) -> DeleteFleetsFleetIdWingsWingIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdWingsWingIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdWingsWingIdInternalServerError]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdWingsWingIdInternalServerError].self) { (source: AnyObject) -> [DeleteFleetsFleetIdWingsWingIdInternalServerError] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdWingsWingIdInternalServerError].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdWingsWingIdInternalServerError
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdWingsWingIdInternalServerError.self) { (source: AnyObject) -> DeleteFleetsFleetIdWingsWingIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdWingsWingIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [DeleteFleetsFleetIdWingsWingIdNotFound]
            Decoders.addDecoder(clazz: [DeleteFleetsFleetIdWingsWingIdNotFound].self) { (source: AnyObject) -> [DeleteFleetsFleetIdWingsWingIdNotFound] in
                return Decoders.decode(clazz: [DeleteFleetsFleetIdWingsWingIdNotFound].self, source: source)
            }
            // Decoder for DeleteFleetsFleetIdWingsWingIdNotFound
            Decoders.addDecoder(clazz: DeleteFleetsFleetIdWingsWingIdNotFound.self) { (source: AnyObject) -> DeleteFleetsFleetIdWingsWingIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DeleteFleetsFleetIdWingsWingIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [FleetsfleetIdwingsSquads]
            Decoders.addDecoder(clazz: [FleetsfleetIdwingsSquads].self) { (source: AnyObject) -> [FleetsfleetIdwingsSquads] in
                return Decoders.decode(clazz: [FleetsfleetIdwingsSquads].self, source: source)
            }
            // Decoder for FleetsfleetIdwingsSquads
            Decoders.addDecoder(clazz: FleetsfleetIdwingsSquads.self) { (source: AnyObject) -> FleetsfleetIdwingsSquads in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FleetsfleetIdwingsSquads()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdCorporationsInternalServerError]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdCorporationsInternalServerError].self) { (source: AnyObject) -> [GetAlliancesAllianceIdCorporationsInternalServerError] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdCorporationsInternalServerError].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdCorporationsInternalServerError
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdCorporationsInternalServerError.self) { (source: AnyObject) -> GetAlliancesAllianceIdCorporationsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdCorporationsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdIconsInternalServerError]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdIconsInternalServerError].self) { (source: AnyObject) -> [GetAlliancesAllianceIdIconsInternalServerError] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdIconsInternalServerError].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdIconsInternalServerError
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdIconsInternalServerError.self) { (source: AnyObject) -> GetAlliancesAllianceIdIconsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdIconsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdIconsNotFound]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdIconsNotFound].self) { (source: AnyObject) -> [GetAlliancesAllianceIdIconsNotFound] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdIconsNotFound].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdIconsNotFound
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdIconsNotFound.self) { (source: AnyObject) -> GetAlliancesAllianceIdIconsNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdIconsNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdIconsOk]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdIconsOk].self) { (source: AnyObject) -> [GetAlliancesAllianceIdIconsOk] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdIconsOk].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdIconsOk
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdIconsOk.self) { (source: AnyObject) -> GetAlliancesAllianceIdIconsOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdIconsOk()
                instance.px128x128 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px128x128"])
                instance.px64x64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px64x64"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdInternalServerError]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdInternalServerError].self) { (source: AnyObject) -> [GetAlliancesAllianceIdInternalServerError] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdInternalServerError].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdInternalServerError
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdInternalServerError.self) { (source: AnyObject) -> GetAlliancesAllianceIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdNotFound]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdNotFound].self) { (source: AnyObject) -> [GetAlliancesAllianceIdNotFound] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdNotFound].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdNotFound
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdNotFound.self) { (source: AnyObject) -> GetAlliancesAllianceIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesAllianceIdOk]
            Decoders.addDecoder(clazz: [GetAlliancesAllianceIdOk].self) { (source: AnyObject) -> [GetAlliancesAllianceIdOk] in
                return Decoders.decode(clazz: [GetAlliancesAllianceIdOk].self, source: source)
            }
            // Decoder for GetAlliancesAllianceIdOk
            Decoders.addDecoder(clazz: GetAlliancesAllianceIdOk.self) { (source: AnyObject) -> GetAlliancesAllianceIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesAllianceIdOk()
                instance.allianceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alliance_name"])
                instance.dateFounded = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date_founded"])
                instance.executorCorp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["executor_corp"])
                instance.ticker = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticker"])
                return instance
            }


            // Decoder for [GetAlliancesInternalServerError]
            Decoders.addDecoder(clazz: [GetAlliancesInternalServerError].self) { (source: AnyObject) -> [GetAlliancesInternalServerError] in
                return Decoders.decode(clazz: [GetAlliancesInternalServerError].self, source: source)
            }
            // Decoder for GetAlliancesInternalServerError
            Decoders.addDecoder(clazz: GetAlliancesInternalServerError.self) { (source: AnyObject) -> GetAlliancesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetAlliancesNames200Ok]
            Decoders.addDecoder(clazz: [GetAlliancesNames200Ok].self) { (source: AnyObject) -> [GetAlliancesNames200Ok] in
                return Decoders.decode(clazz: [GetAlliancesNames200Ok].self, source: source)
            }
            // Decoder for GetAlliancesNames200Ok
            Decoders.addDecoder(clazz: GetAlliancesNames200Ok.self) { (source: AnyObject) -> GetAlliancesNames200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesNames200Ok()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.allianceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alliance_name"])
                return instance
            }


            // Decoder for [GetAlliancesNamesInternalServerError]
            Decoders.addDecoder(clazz: [GetAlliancesNamesInternalServerError].self) { (source: AnyObject) -> [GetAlliancesNamesInternalServerError] in
                return Decoders.decode(clazz: [GetAlliancesNamesInternalServerError].self, source: source)
            }
            // Decoder for GetAlliancesNamesInternalServerError
            Decoders.addDecoder(clazz: GetAlliancesNamesInternalServerError.self) { (source: AnyObject) -> GetAlliancesNamesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetAlliancesNamesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdAssets200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdAssets200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdAssets200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdAssets200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdAssets200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdAssets200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdAssets200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdAssets200Ok()
                instance.isSingleton = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_singleton"])
                instance.itemId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["item_id"])
                instance.locationFlag = GetCharactersCharacterIdAssets200Ok.LocationFlag(rawValue: (sourceDictionary["location_flag"] as? String) ?? "") 
                instance.locationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location_id"])
                instance.locationType = GetCharactersCharacterIdAssets200Ok.LocationType(rawValue: (sourceDictionary["location_type"] as? String) ?? "") 
                instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdAssetsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdAssetsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdAssetsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdAssetsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdAssetsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdAssetsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdAssetsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdAssetsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdAssetsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdAssetsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdAssetsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdAssetsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdAssetsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdAssetsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdAssetsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdAssetsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarks200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarks200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarks200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarks200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarks200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarks200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarks200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarks200Ok()
                instance.bookmarkId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["bookmark_id"])
                instance.createDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["create_date"])
                instance.creatorId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["creator_id"])
                instance.folderId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["folder_id"])
                instance.memo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["memo"])
                instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"])
                instance.target = Decoders.decodeOptional(clazz: CharacterscharacterIdbookmarksTarget.self, source: sourceDictionary["target"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarksFolders200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarksFolders200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarksFolders200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarksFolders200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarksFolders200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarksFolders200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarksFolders200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarksFolders200Ok()
                instance.folderId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["folder_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarksFoldersForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarksFoldersForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarksFoldersForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarksFoldersForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarksFoldersForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarksFoldersForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarksFoldersForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarksFoldersForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarksFoldersInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarksFoldersInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarksFoldersInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarksFoldersInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarksFoldersInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarksFoldersInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarksFoldersInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarksFoldersInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarksForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarksForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarksForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarksForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarksForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarksForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarksForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarksForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdBookmarksInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdBookmarksInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdBookmarksInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdBookmarksInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdBookmarksInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdBookmarksInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdBookmarksInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdBookmarksInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendar200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendar200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendar200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendar200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendar200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendar200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendar200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendar200Ok()
                instance.eventDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["event_date"])
                instance.eventId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["event_id"])
                instance.eventResponse = GetCharactersCharacterIdCalendar200Ok.EventResponse(rawValue: (sourceDictionary["event_response"] as? String) ?? "") 
                instance.importance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["importance"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendarEventIdForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendarEventIdForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendarEventIdForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendarEventIdForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendarEventIdForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendarEventIdForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendarEventIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendarEventIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendarEventIdInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendarEventIdInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendarEventIdInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendarEventIdInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendarEventIdInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendarEventIdInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendarEventIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendarEventIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendarEventIdOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendarEventIdOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendarEventIdOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendarEventIdOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendarEventIdOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendarEventIdOk.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendarEventIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendarEventIdOk()
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.duration = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["duration"])
                instance.eventId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["event_id"])
                instance.importance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["importance"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["owner_id"])
                instance.ownerName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner_name"])
                instance.ownerType = GetCharactersCharacterIdCalendarEventIdOk.OwnerType(rawValue: (sourceDictionary["owner_type"] as? String) ?? "") 
                instance.response = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"])
                instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendarForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendarForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendarForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendarForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendarForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendarForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendarForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendarForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCalendarInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCalendarInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdCalendarInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCalendarInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCalendarInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCalendarInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdCalendarInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCalendarInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdClonesForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdClonesForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdClonesForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdClonesForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdClonesForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdClonesForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdClonesForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdClonesForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdClonesInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdClonesInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdClonesInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdClonesInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdClonesInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdClonesInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdClonesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdClonesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdClonesOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdClonesOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdClonesOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdClonesOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdClonesOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdClonesOk.self) { (source: AnyObject) -> GetCharactersCharacterIdClonesOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdClonesOk()
                instance.homeLocation = Decoders.decodeOptional(clazz: GetCharactersCharacterIdClonesOkHomeLocation.self, source: sourceDictionary["home_location"])
                instance.jumpClones = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jump_clones"])
                instance.lastJumpDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_jump_date"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdClonesOkHomeLocation]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdClonesOkHomeLocation].self) { (source: AnyObject) -> [GetCharactersCharacterIdClonesOkHomeLocation] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdClonesOkHomeLocation].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdClonesOkHomeLocation
            Decoders.addDecoder(clazz: GetCharactersCharacterIdClonesOkHomeLocation.self) { (source: AnyObject) -> GetCharactersCharacterIdClonesOkHomeLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdClonesOkHomeLocation()
                instance.locationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location_id"])
                instance.locationType = GetCharactersCharacterIdClonesOkHomeLocation.LocationType(rawValue: (sourceDictionary["location_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [GetCharactersCharacterIdClonesOkJumpClones]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdClonesOkJumpClones].self) { (source: AnyObject) -> [GetCharactersCharacterIdClonesOkJumpClones] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdClonesOkJumpClones].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdClonesOkJumpClones
            Decoders.addDecoder(clazz: GetCharactersCharacterIdClonesOkJumpClones.self) { (source: AnyObject) -> GetCharactersCharacterIdClonesOkJumpClones in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdClonesOkJumpClones()
                instance.implants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["implants"])
                instance.locationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location_id"])
                instance.locationType = GetCharactersCharacterIdClonesOkJumpClones.LocationType(rawValue: (sourceDictionary["location_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCorporationhistory200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCorporationhistory200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdCorporationhistory200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCorporationhistory200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCorporationhistory200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCorporationhistory200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdCorporationhistory200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCorporationhistory200Ok()
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.isDeleted = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_deleted"])
                instance.recordId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["record_id"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start_date"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdCorporationhistoryInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdCorporationhistoryInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdCorporationhistoryInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdCorporationhistoryInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdCorporationhistoryInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdCorporationhistoryInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdCorporationhistoryInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdCorporationhistoryInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdKillmailsRecent200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdKillmailsRecent200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdKillmailsRecent200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdKillmailsRecent200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdKillmailsRecent200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdKillmailsRecent200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdKillmailsRecent200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdKillmailsRecent200Ok()
                instance.killmailHash = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["killmail_hash"])
                instance.killmailId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["killmail_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdKillmailsRecentForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdKillmailsRecentForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdKillmailsRecentForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdKillmailsRecentForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdKillmailsRecentForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdKillmailsRecentForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdKillmailsRecentForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdKillmailsRecentForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdKillmailsRecentInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdKillmailsRecentInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdKillmailsRecentInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdKillmailsRecentInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdKillmailsRecentInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdKillmailsRecentInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdKillmailsRecentInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdKillmailsRecentInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdLocationForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdLocationForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdLocationForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdLocationForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdLocationForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdLocationForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdLocationForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdLocationForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdLocationInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdLocationInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdLocationInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdLocationInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdLocationInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdLocationInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdLocationInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdLocationInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdLocationOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdLocationOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdLocationOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdLocationOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdLocationOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdLocationOk.self) { (source: AnyObject) -> GetCharactersCharacterIdLocationOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdLocationOk()
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.stationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["station_id"])
                instance.structureId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["structure_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMail200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMail200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdMail200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMail200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMail200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMail200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdMail200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMail200Ok()
                instance.from = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["from"])
                instance.isRead = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_read"])
                instance.labels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["labels"])
                instance.mailId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["mail_id"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.timestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timestamp"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdMailForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdMailInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailLabelsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailLabelsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailLabelsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailLabelsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailLabelsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailLabelsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdMailLabelsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailLabelsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailLabelsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailLabelsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailLabelsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailLabelsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailLabelsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailLabelsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdMailLabelsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailLabelsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailLabelsOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailLabelsOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailLabelsOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailLabelsOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailLabelsOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailLabelsOk.self) { (source: AnyObject) -> GetCharactersCharacterIdMailLabelsOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailLabelsOk()
                instance.labels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["labels"])
                instance.totalUnreadCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_unread_count"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailLabelsOkLabels]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailLabelsOkLabels].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailLabelsOkLabels] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailLabelsOkLabels].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailLabelsOkLabels
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailLabelsOkLabels.self) { (source: AnyObject) -> GetCharactersCharacterIdMailLabelsOkLabels in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailLabelsOkLabels()
                instance.color = GetCharactersCharacterIdMailLabelsOkLabels.Color(rawValue: (sourceDictionary["color"] as? String) ?? "") 
                instance.labelId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["label_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.unreadCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["unread_count"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailLists200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailLists200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailLists200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailLists200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailLists200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailLists200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdMailLists200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailLists200Ok()
                instance.mailingListId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mailing_list_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailListsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailListsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailListsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailListsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailListsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailListsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdMailListsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailListsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailListsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailListsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailListsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailListsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailListsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailListsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdMailListsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailListsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailMailIdForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailMailIdForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailMailIdForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailMailIdForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailMailIdForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailMailIdForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdMailMailIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailMailIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailMailIdInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailMailIdInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailMailIdInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailMailIdInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailMailIdInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailMailIdInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdMailMailIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailMailIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailMailIdNotFound]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailMailIdNotFound].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailMailIdNotFound] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailMailIdNotFound].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailMailIdNotFound
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailMailIdNotFound.self) { (source: AnyObject) -> GetCharactersCharacterIdMailMailIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailMailIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailMailIdOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailMailIdOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailMailIdOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailMailIdOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailMailIdOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailMailIdOk.self) { (source: AnyObject) -> GetCharactersCharacterIdMailMailIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailMailIdOk()
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.from = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["from"])
                instance.labels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["labels"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                instance.timestamp = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["timestamp"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdMailMailIdOkRecipients]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdMailMailIdOkRecipients].self) { (source: AnyObject) -> [GetCharactersCharacterIdMailMailIdOkRecipients] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdMailMailIdOkRecipients].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdMailMailIdOkRecipients
            Decoders.addDecoder(clazz: GetCharactersCharacterIdMailMailIdOkRecipients.self) { (source: AnyObject) -> GetCharactersCharacterIdMailMailIdOkRecipients in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdMailMailIdOkRecipients()
                instance.recipientId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["recipient_id"])
                instance.recipientType = GetCharactersCharacterIdMailMailIdOkRecipients.RecipientType(rawValue: (sourceDictionary["recipient_type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [GetCharactersCharacterIdOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdOk.self) { (source: AnyObject) -> GetCharactersCharacterIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdOk()
                instance.ancestryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ancestry_id"])
                instance.birthday = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["birthday"])
                instance.bloodlineId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bloodline_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.gender = GetCharactersCharacterIdOk.Gender(rawValue: (sourceDictionary["gender"] as? String) ?? "") 
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.raceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["race_id"])
                instance.securityStatus = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["security_status"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanets200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanets200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanets200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanets200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanets200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanets200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanets200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanets200Ok()
                instance.lastUpdate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_update"])
                instance.numPins = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["num_pins"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"])
                instance.planetId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["planet_id"])
                instance.planetType = GetCharactersCharacterIdPlanets200Ok.PlanetType(rawValue: (sourceDictionary["planet_type"] as? String) ?? "") 
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.upgradeLevel = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["upgrade_level"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdNotFound]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdNotFound].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdNotFound] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdNotFound].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdNotFound
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdNotFound.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOk.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOk()
                instance.links = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["links"])
                instance.pins = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["pins"])
                instance.routes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["routes"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkContent]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkContent].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkContent] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkContent].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkContent
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkContent.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkContent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkContent()
                instance.content = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["content"])
                instance.contentQuantity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["content_quantity"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails()
                instance.cycleTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cycle_time"])
                instance.headRadius = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["head_radius"])
                instance.heads = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["heads"])
                instance.productTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["product_type_id"])
                instance.qtyPerCycle = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty_per_cycle"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetailsHeads()
                instance.headId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["head_id"])
                instance.latitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["longitude"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails()
                instance.schematicId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["schematic_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkLinks]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkLinks].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkLinks] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkLinks].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkLinks
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkLinks.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkLinks()
                instance.destinationPinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["destination_pin_id"])
                instance.linkLevel = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["link_level"])
                instance.sourcePinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["source_pin_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkPins]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkPins].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkPins] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkPins].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkPins
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkPins.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkPins in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkPins()
                instance.content = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["content"])
                instance.expiryTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expiry_time"])
                instance.extractorDetails = Decoders.decodeOptional(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkExtractorDetails.self, source: sourceDictionary["extractor_details"])
                instance.factoryDetails = Decoders.decodeOptional(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkFactoryDetails.self, source: sourceDictionary["factory_details"])
                instance.installTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["install_time"])
                instance.lastCycleStart = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_cycle_start"])
                instance.latitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["longitude"])
                instance.pinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pin_id"])
                instance.schematicId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["schematic_id"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkRoutes]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkRoutes].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkRoutes] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkRoutes].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkRoutes
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkRoutes.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkRoutes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkRoutes()
                instance.contentTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["content_type_id"])
                instance.destinationPinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["destination_pin_id"])
                instance.quantity = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quantity"])
                instance.routeId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["route_id"])
                instance.sourcePinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["source_pin_id"])
                instance.waypoints = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["waypoints"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints].self) { (source: AnyObject) -> [GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints.self) { (source: AnyObject) -> GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPlanetsPlanetIdOkWaypoints()
                instance.order = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["order"])
                instance.pinId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["pin_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPortraitInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPortraitInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdPortraitInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPortraitInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPortraitInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPortraitInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdPortraitInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPortraitInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPortraitNotFound]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPortraitNotFound].self) { (source: AnyObject) -> [GetCharactersCharacterIdPortraitNotFound] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPortraitNotFound].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPortraitNotFound
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPortraitNotFound.self) { (source: AnyObject) -> GetCharactersCharacterIdPortraitNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPortraitNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdPortraitOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdPortraitOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdPortraitOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdPortraitOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdPortraitOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdPortraitOk.self) { (source: AnyObject) -> GetCharactersCharacterIdPortraitOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdPortraitOk()
                instance.px128x128 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px128x128"])
                instance.px256x256 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px256x256"])
                instance.px512x512 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px512x512"])
                instance.px64x64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px64x64"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSearchForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSearchForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdSearchForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSearchForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSearchForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSearchForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdSearchForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSearchForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSearchInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSearchInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdSearchInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSearchInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSearchInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSearchInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdSearchInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSearchInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSearchOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSearchOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdSearchOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSearchOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSearchOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSearchOk.self) { (source: AnyObject) -> GetCharactersCharacterIdSearchOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSearchOk()
                instance.agent = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agent"])
                instance.alliance = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alliance"])
                instance.character = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["character"])
                instance.constellation = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["constellation"])
                instance.corporation = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["corporation"])
                instance.faction = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["faction"])
                instance.inventorytype = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["inventorytype"])
                instance.region = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["region"])
                instance.solarsystem = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["solarsystem"])
                instance.station = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["station"])
                instance.structure = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["structure"])
                instance.wormhole = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wormhole"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdShipForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdShipForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdShipForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdShipForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdShipForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdShipForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdShipForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdShipForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdShipInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdShipInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdShipInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdShipInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdShipInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdShipInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdShipInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdShipInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdShipOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdShipOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdShipOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdShipOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdShipOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdShipOk.self) { (source: AnyObject) -> GetCharactersCharacterIdShipOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdShipOk()
                instance.shipItemId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["ship_item_id"])
                instance.shipName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ship_name"])
                instance.shipTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ship_type_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillqueue200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillqueue200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillqueue200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillqueue200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillqueue200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillqueue200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillqueue200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillqueue200Ok()
                instance.finishDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finish_date"])
                instance.finishedLevel = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["finished_level"])
                instance.levelEndSp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level_end_sp"])
                instance.levelStartSp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level_start_sp"])
                instance.queuePosition = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queue_position"])
                instance.skillId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["skill_id"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start_date"])
                instance.trainingStartSp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["training_start_sp"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillqueueForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillqueueForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillqueueForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillqueueForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillqueueForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillqueueForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillqueueForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillqueueForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillqueueInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillqueueInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillqueueInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillqueueInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillqueueInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillqueueInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillqueueInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillqueueInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillsOk]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillsOk].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillsOk] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillsOk].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillsOk
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillsOk.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillsOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillsOk()
                instance.skills = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["skills"])
                instance.totalSp = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["total_sp"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdSkillsOkSkills]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdSkillsOkSkills].self) { (source: AnyObject) -> [GetCharactersCharacterIdSkillsOkSkills] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdSkillsOkSkills].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdSkillsOkSkills
            Decoders.addDecoder(clazz: GetCharactersCharacterIdSkillsOkSkills.self) { (source: AnyObject) -> GetCharactersCharacterIdSkillsOkSkills in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdSkillsOkSkills()
                instance.currentSkillLevel = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["current_skill_level"])
                instance.skillId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["skill_id"])
                instance.skillpointsInSkill = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["skillpoints_in_skill"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdUnprocessableEntity].self) { (source: AnyObject) -> [GetCharactersCharacterIdUnprocessableEntity] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdUnprocessableEntity].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdUnprocessableEntity
            Decoders.addDecoder(clazz: GetCharactersCharacterIdUnprocessableEntity.self) { (source: AnyObject) -> GetCharactersCharacterIdUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdWallets200Ok]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdWallets200Ok].self) { (source: AnyObject) -> [GetCharactersCharacterIdWallets200Ok] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdWallets200Ok].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdWallets200Ok
            Decoders.addDecoder(clazz: GetCharactersCharacterIdWallets200Ok.self) { (source: AnyObject) -> GetCharactersCharacterIdWallets200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdWallets200Ok()
                instance.balance = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["balance"])
                instance.walletId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["wallet_id"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdWalletsForbidden]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdWalletsForbidden].self) { (source: AnyObject) -> [GetCharactersCharacterIdWalletsForbidden] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdWalletsForbidden].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdWalletsForbidden
            Decoders.addDecoder(clazz: GetCharactersCharacterIdWalletsForbidden.self) { (source: AnyObject) -> GetCharactersCharacterIdWalletsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdWalletsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersCharacterIdWalletsInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersCharacterIdWalletsInternalServerError].self) { (source: AnyObject) -> [GetCharactersCharacterIdWalletsInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersCharacterIdWalletsInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersCharacterIdWalletsInternalServerError
            Decoders.addDecoder(clazz: GetCharactersCharacterIdWalletsInternalServerError.self) { (source: AnyObject) -> GetCharactersCharacterIdWalletsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersCharacterIdWalletsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCharactersNames200Ok]
            Decoders.addDecoder(clazz: [GetCharactersNames200Ok].self) { (source: AnyObject) -> [GetCharactersNames200Ok] in
                return Decoders.decode(clazz: [GetCharactersNames200Ok].self, source: source)
            }
            // Decoder for GetCharactersNames200Ok
            Decoders.addDecoder(clazz: GetCharactersNames200Ok.self) { (source: AnyObject) -> GetCharactersNames200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersNames200Ok()
                instance.characterId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["character_id"])
                instance.characterName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["character_name"])
                return instance
            }


            // Decoder for [GetCharactersNamesInternalServerError]
            Decoders.addDecoder(clazz: [GetCharactersNamesInternalServerError].self) { (source: AnyObject) -> [GetCharactersNamesInternalServerError] in
                return Decoders.decode(clazz: [GetCharactersNamesInternalServerError].self, source: source)
            }
            // Decoder for GetCharactersNamesInternalServerError
            Decoders.addDecoder(clazz: GetCharactersNamesInternalServerError.self) { (source: AnyObject) -> GetCharactersNamesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCharactersNamesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdAlliancehistory200Ok]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdAlliancehistory200Ok].self) { (source: AnyObject) -> [GetCorporationsCorporationIdAlliancehistory200Ok] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdAlliancehistory200Ok].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdAlliancehistory200Ok
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdAlliancehistory200Ok.self) { (source: AnyObject) -> GetCorporationsCorporationIdAlliancehistory200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdAlliancehistory200Ok()
                instance.alliance = Decoders.decodeOptional(clazz: CorporationscorporationIdalliancehistoryAlliance.self, source: sourceDictionary["alliance"])
                instance.recordId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["record_id"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start_date"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdAlliancehistoryInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdAlliancehistoryInternalServerError].self) { (source: AnyObject) -> [GetCorporationsCorporationIdAlliancehistoryInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdAlliancehistoryInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdAlliancehistoryInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdAlliancehistoryInternalServerError.self) { (source: AnyObject) -> GetCorporationsCorporationIdAlliancehistoryInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdAlliancehistoryInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdIconsInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdIconsInternalServerError].self) { (source: AnyObject) -> [GetCorporationsCorporationIdIconsInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdIconsInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdIconsInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdIconsInternalServerError.self) { (source: AnyObject) -> GetCorporationsCorporationIdIconsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdIconsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdIconsNotFound]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdIconsNotFound].self) { (source: AnyObject) -> [GetCorporationsCorporationIdIconsNotFound] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdIconsNotFound].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdIconsNotFound
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdIconsNotFound.self) { (source: AnyObject) -> GetCorporationsCorporationIdIconsNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdIconsNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdIconsOk]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdIconsOk].self) { (source: AnyObject) -> [GetCorporationsCorporationIdIconsOk] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdIconsOk].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdIconsOk
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdIconsOk.self) { (source: AnyObject) -> GetCorporationsCorporationIdIconsOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdIconsOk()
                instance.px128x128 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px128x128"])
                instance.px256x256 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px256x256"])
                instance.px64x64 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["px64x64"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdInternalServerError].self) { (source: AnyObject) -> [GetCorporationsCorporationIdInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdInternalServerError.self) { (source: AnyObject) -> GetCorporationsCorporationIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdMembers200Ok]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdMembers200Ok].self) { (source: AnyObject) -> [GetCorporationsCorporationIdMembers200Ok] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdMembers200Ok].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdMembers200Ok
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdMembers200Ok.self) { (source: AnyObject) -> GetCorporationsCorporationIdMembers200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdMembers200Ok()
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdMembersForbidden]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdMembersForbidden].self) { (source: AnyObject) -> [GetCorporationsCorporationIdMembersForbidden] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdMembersForbidden].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdMembersForbidden
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdMembersForbidden.self) { (source: AnyObject) -> GetCorporationsCorporationIdMembersForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdMembersForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdMembersInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdMembersInternalServerError].self) { (source: AnyObject) -> [GetCorporationsCorporationIdMembersInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdMembersInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdMembersInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdMembersInternalServerError.self) { (source: AnyObject) -> GetCorporationsCorporationIdMembersInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdMembersInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdNotFound]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdNotFound].self) { (source: AnyObject) -> [GetCorporationsCorporationIdNotFound] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdNotFound].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdNotFound
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdNotFound.self) { (source: AnyObject) -> GetCorporationsCorporationIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdOk]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdOk].self) { (source: AnyObject) -> [GetCorporationsCorporationIdOk] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdOk].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdOk
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdOk.self) { (source: AnyObject) -> GetCorporationsCorporationIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdOk()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.ceoId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ceo_id"])
                instance.corporationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporation_name"])
                instance.memberCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["member_count"])
                instance.ticker = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ticker"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdRoles200Ok]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdRoles200Ok].self) { (source: AnyObject) -> [GetCorporationsCorporationIdRoles200Ok] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdRoles200Ok].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdRoles200Ok
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdRoles200Ok.self) { (source: AnyObject) -> GetCorporationsCorporationIdRoles200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdRoles200Ok()
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                instance.grantableRoles = GetCorporationsCorporationIdRoles200Ok.[GrantableRoles](rawValue: (sourceDictionary["grantable_roles"] as? String) ?? "") 
                instance.grantableRolesAtBase = GetCorporationsCorporationIdRoles200Ok.[GrantableRolesAtBase](rawValue: (sourceDictionary["grantable_roles_at_base"] as? String) ?? "") 
                instance.grantableRolesAtHq = GetCorporationsCorporationIdRoles200Ok.[GrantableRolesAtHq](rawValue: (sourceDictionary["grantable_roles_at_hq"] as? String) ?? "") 
                instance.grantableRolesAtOther = GetCorporationsCorporationIdRoles200Ok.[GrantableRolesAtOther](rawValue: (sourceDictionary["grantable_roles_at_other"] as? String) ?? "") 
                instance.roles = GetCorporationsCorporationIdRoles200Ok.[Roles](rawValue: (sourceDictionary["roles"] as? String) ?? "") 
                instance.rolesAtBase = GetCorporationsCorporationIdRoles200Ok.[RolesAtBase](rawValue: (sourceDictionary["roles_at_base"] as? String) ?? "") 
                instance.rolesAtHq = GetCorporationsCorporationIdRoles200Ok.[RolesAtHq](rawValue: (sourceDictionary["roles_at_hq"] as? String) ?? "") 
                instance.rolesAtOther = GetCorporationsCorporationIdRoles200Ok.[RolesAtOther](rawValue: (sourceDictionary["roles_at_other"] as? String) ?? "") 
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdRolesForbidden]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdRolesForbidden].self) { (source: AnyObject) -> [GetCorporationsCorporationIdRolesForbidden] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdRolesForbidden].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdRolesForbidden
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdRolesForbidden.self) { (source: AnyObject) -> GetCorporationsCorporationIdRolesForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdRolesForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsCorporationIdRolesInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsCorporationIdRolesInternalServerError].self) { (source: AnyObject) -> [GetCorporationsCorporationIdRolesInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsCorporationIdRolesInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsCorporationIdRolesInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsCorporationIdRolesInternalServerError.self) { (source: AnyObject) -> GetCorporationsCorporationIdRolesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsCorporationIdRolesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetCorporationsNames200Ok]
            Decoders.addDecoder(clazz: [GetCorporationsNames200Ok].self) { (source: AnyObject) -> [GetCorporationsNames200Ok] in
                return Decoders.decode(clazz: [GetCorporationsNames200Ok].self, source: source)
            }
            // Decoder for GetCorporationsNames200Ok
            Decoders.addDecoder(clazz: GetCorporationsNames200Ok.self) { (source: AnyObject) -> GetCorporationsNames200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsNames200Ok()
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.corporationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["corporation_name"])
                return instance
            }


            // Decoder for [GetCorporationsNamesInternalServerError]
            Decoders.addDecoder(clazz: [GetCorporationsNamesInternalServerError].self) { (source: AnyObject) -> [GetCorporationsNamesInternalServerError] in
                return Decoders.decode(clazz: [GetCorporationsNamesInternalServerError].self, source: source)
            }
            // Decoder for GetCorporationsNamesInternalServerError
            Decoders.addDecoder(clazz: GetCorporationsNamesInternalServerError.self) { (source: AnyObject) -> GetCorporationsNamesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetCorporationsNamesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdForbidden]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdForbidden].self) { (source: AnyObject) -> [GetFleetsFleetIdForbidden] in
                return Decoders.decode(clazz: [GetFleetsFleetIdForbidden].self, source: source)
            }
            // Decoder for GetFleetsFleetIdForbidden
            Decoders.addDecoder(clazz: GetFleetsFleetIdForbidden.self) { (source: AnyObject) -> GetFleetsFleetIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdInternalServerError]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdInternalServerError].self) { (source: AnyObject) -> [GetFleetsFleetIdInternalServerError] in
                return Decoders.decode(clazz: [GetFleetsFleetIdInternalServerError].self, source: source)
            }
            // Decoder for GetFleetsFleetIdInternalServerError
            Decoders.addDecoder(clazz: GetFleetsFleetIdInternalServerError.self) { (source: AnyObject) -> GetFleetsFleetIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdMembers200Ok]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdMembers200Ok].self) { (source: AnyObject) -> [GetFleetsFleetIdMembers200Ok] in
                return Decoders.decode(clazz: [GetFleetsFleetIdMembers200Ok].self, source: source)
            }
            // Decoder for GetFleetsFleetIdMembers200Ok
            Decoders.addDecoder(clazz: GetFleetsFleetIdMembers200Ok.self) { (source: AnyObject) -> GetFleetsFleetIdMembers200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdMembers200Ok()
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                instance.joinTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["join_time"])
                instance.role = GetFleetsFleetIdMembers200Ok.Role(rawValue: (sourceDictionary["role"] as? String) ?? "") 
                instance.roleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role_name"])
                instance.shipTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ship_type_id"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.squadId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["squad_id"])
                instance.stationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["station_id"])
                instance.takesFleetWarp = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["takes_fleet_warp"])
                instance.wingId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["wing_id"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdMembersForbidden]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdMembersForbidden].self) { (source: AnyObject) -> [GetFleetsFleetIdMembersForbidden] in
                return Decoders.decode(clazz: [GetFleetsFleetIdMembersForbidden].self, source: source)
            }
            // Decoder for GetFleetsFleetIdMembersForbidden
            Decoders.addDecoder(clazz: GetFleetsFleetIdMembersForbidden.self) { (source: AnyObject) -> GetFleetsFleetIdMembersForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdMembersForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdMembersInternalServerError]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdMembersInternalServerError].self) { (source: AnyObject) -> [GetFleetsFleetIdMembersInternalServerError] in
                return Decoders.decode(clazz: [GetFleetsFleetIdMembersInternalServerError].self, source: source)
            }
            // Decoder for GetFleetsFleetIdMembersInternalServerError
            Decoders.addDecoder(clazz: GetFleetsFleetIdMembersInternalServerError.self) { (source: AnyObject) -> GetFleetsFleetIdMembersInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdMembersInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdMembersNotFound]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdMembersNotFound].self) { (source: AnyObject) -> [GetFleetsFleetIdMembersNotFound] in
                return Decoders.decode(clazz: [GetFleetsFleetIdMembersNotFound].self, source: source)
            }
            // Decoder for GetFleetsFleetIdMembersNotFound
            Decoders.addDecoder(clazz: GetFleetsFleetIdMembersNotFound.self) { (source: AnyObject) -> GetFleetsFleetIdMembersNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdMembersNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdNotFound]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdNotFound].self) { (source: AnyObject) -> [GetFleetsFleetIdNotFound] in
                return Decoders.decode(clazz: [GetFleetsFleetIdNotFound].self, source: source)
            }
            // Decoder for GetFleetsFleetIdNotFound
            Decoders.addDecoder(clazz: GetFleetsFleetIdNotFound.self) { (source: AnyObject) -> GetFleetsFleetIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdOk]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdOk].self) { (source: AnyObject) -> [GetFleetsFleetIdOk] in
                return Decoders.decode(clazz: [GetFleetsFleetIdOk].self, source: source)
            }
            // Decoder for GetFleetsFleetIdOk
            Decoders.addDecoder(clazz: GetFleetsFleetIdOk.self) { (source: AnyObject) -> GetFleetsFleetIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdOk()
                instance.isFreeMove = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_free_move"])
                instance.isRegistered = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_registered"])
                instance.isVoiceEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_voice_enabled"])
                instance.motd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motd"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdWings200Ok]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdWings200Ok].self) { (source: AnyObject) -> [GetFleetsFleetIdWings200Ok] in
                return Decoders.decode(clazz: [GetFleetsFleetIdWings200Ok].self, source: source)
            }
            // Decoder for GetFleetsFleetIdWings200Ok
            Decoders.addDecoder(clazz: GetFleetsFleetIdWings200Ok.self) { (source: AnyObject) -> GetFleetsFleetIdWings200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdWings200Ok()
                instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.squads = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["squads"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdWingsForbidden]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdWingsForbidden].self) { (source: AnyObject) -> [GetFleetsFleetIdWingsForbidden] in
                return Decoders.decode(clazz: [GetFleetsFleetIdWingsForbidden].self, source: source)
            }
            // Decoder for GetFleetsFleetIdWingsForbidden
            Decoders.addDecoder(clazz: GetFleetsFleetIdWingsForbidden.self) { (source: AnyObject) -> GetFleetsFleetIdWingsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdWingsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdWingsInternalServerError]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdWingsInternalServerError].self) { (source: AnyObject) -> [GetFleetsFleetIdWingsInternalServerError] in
                return Decoders.decode(clazz: [GetFleetsFleetIdWingsInternalServerError].self, source: source)
            }
            // Decoder for GetFleetsFleetIdWingsInternalServerError
            Decoders.addDecoder(clazz: GetFleetsFleetIdWingsInternalServerError.self) { (source: AnyObject) -> GetFleetsFleetIdWingsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdWingsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetFleetsFleetIdWingsNotFound]
            Decoders.addDecoder(clazz: [GetFleetsFleetIdWingsNotFound].self) { (source: AnyObject) -> [GetFleetsFleetIdWingsNotFound] in
                return Decoders.decode(clazz: [GetFleetsFleetIdWingsNotFound].self, source: source)
            }
            // Decoder for GetFleetsFleetIdWingsNotFound
            Decoders.addDecoder(clazz: GetFleetsFleetIdWingsNotFound.self) { (source: AnyObject) -> GetFleetsFleetIdWingsNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetFleetsFleetIdWingsNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetIncursions200Ok]
            Decoders.addDecoder(clazz: [GetIncursions200Ok].self) { (source: AnyObject) -> [GetIncursions200Ok] in
                return Decoders.decode(clazz: [GetIncursions200Ok].self, source: source)
            }
            // Decoder for GetIncursions200Ok
            Decoders.addDecoder(clazz: GetIncursions200Ok.self) { (source: AnyObject) -> GetIncursions200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIncursions200Ok()
                instance.constellationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["constellation_id"])
                instance.factionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["faction_id"])
                instance.hasBoss = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["has_boss"])
                instance.infestedSolarSystems = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["infested_solar_systems"])
                instance.influence = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["influence"])
                instance.stagingSolarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["staging_solar_system_id"])
                instance.state = GetIncursions200Ok.State(rawValue: (sourceDictionary["state"] as? String) ?? "") 
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [GetIncursionsInternalServerError]
            Decoders.addDecoder(clazz: [GetIncursionsInternalServerError].self) { (source: AnyObject) -> [GetIncursionsInternalServerError] in
                return Decoders.decode(clazz: [GetIncursionsInternalServerError].self, source: source)
            }
            // Decoder for GetIncursionsInternalServerError
            Decoders.addDecoder(clazz: GetIncursionsInternalServerError.self) { (source: AnyObject) -> GetIncursionsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIncursionsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetIndustryFacilities200Ok]
            Decoders.addDecoder(clazz: [GetIndustryFacilities200Ok].self) { (source: AnyObject) -> [GetIndustryFacilities200Ok] in
                return Decoders.decode(clazz: [GetIndustryFacilities200Ok].self, source: source)
            }
            // Decoder for GetIndustryFacilities200Ok
            Decoders.addDecoder(clazz: GetIndustryFacilities200Ok.self) { (source: AnyObject) -> GetIndustryFacilities200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIndustryFacilities200Ok()
                instance.facilityId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["facility_id"])
                instance.ownerId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["owner_id"])
                instance.regionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["region_id"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.tax = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["tax"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetIndustryFacilitiesInternalServerError]
            Decoders.addDecoder(clazz: [GetIndustryFacilitiesInternalServerError].self) { (source: AnyObject) -> [GetIndustryFacilitiesInternalServerError] in
                return Decoders.decode(clazz: [GetIndustryFacilitiesInternalServerError].self, source: source)
            }
            // Decoder for GetIndustryFacilitiesInternalServerError
            Decoders.addDecoder(clazz: GetIndustryFacilitiesInternalServerError.self) { (source: AnyObject) -> GetIndustryFacilitiesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIndustryFacilitiesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetIndustrySystems200Ok]
            Decoders.addDecoder(clazz: [GetIndustrySystems200Ok].self) { (source: AnyObject) -> [GetIndustrySystems200Ok] in
                return Decoders.decode(clazz: [GetIndustrySystems200Ok].self, source: source)
            }
            // Decoder for GetIndustrySystems200Ok
            Decoders.addDecoder(clazz: GetIndustrySystems200Ok.self) { (source: AnyObject) -> GetIndustrySystems200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIndustrySystems200Ok()
                instance.costIndices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["cost_indices"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                return instance
            }


            // Decoder for [GetIndustrySystemsInternalServerError]
            Decoders.addDecoder(clazz: [GetIndustrySystemsInternalServerError].self) { (source: AnyObject) -> [GetIndustrySystemsInternalServerError] in
                return Decoders.decode(clazz: [GetIndustrySystemsInternalServerError].self, source: source)
            }
            // Decoder for GetIndustrySystemsInternalServerError
            Decoders.addDecoder(clazz: GetIndustrySystemsInternalServerError.self) { (source: AnyObject) -> GetIndustrySystemsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetIndustrySystemsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetInsurancePrices200Ok]
            Decoders.addDecoder(clazz: [GetInsurancePrices200Ok].self) { (source: AnyObject) -> [GetInsurancePrices200Ok] in
                return Decoders.decode(clazz: [GetInsurancePrices200Ok].self, source: source)
            }
            // Decoder for GetInsurancePrices200Ok
            Decoders.addDecoder(clazz: GetInsurancePrices200Ok.self) { (source: AnyObject) -> GetInsurancePrices200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetInsurancePrices200Ok()
                instance.levels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["levels"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetInsurancePricesInternalServerError]
            Decoders.addDecoder(clazz: [GetInsurancePricesInternalServerError].self) { (source: AnyObject) -> [GetInsurancePricesInternalServerError] in
                return Decoders.decode(clazz: [GetInsurancePricesInternalServerError].self, source: source)
            }
            // Decoder for GetInsurancePricesInternalServerError
            Decoders.addDecoder(clazz: GetInsurancePricesInternalServerError.self) { (source: AnyObject) -> GetInsurancePricesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetInsurancePricesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashInternalServerError]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashInternalServerError].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashInternalServerError] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashInternalServerError].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashInternalServerError
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashInternalServerError.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOk]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOk].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOk] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOk].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOk
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOk.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOk()
                instance.attackers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["attackers"])
                instance.killmailId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["killmail_id"])
                instance.killmailTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["killmail_time"])
                instance.moonId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["moon_id"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.victim = Decoders.decodeOptional(clazz: GetKillmailsKillmailIdKillmailHashOkVictim.self, source: sourceDictionary["victim"])
                instance.warId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["war_id"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOkAttackers]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOkAttackers].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOkAttackers] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOkAttackers].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOkAttackers
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOkAttackers.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOkAttackers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOkAttackers()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.damageDone = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["damage_done"])
                instance.factionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["faction_id"])
                instance.finalBlow = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["final_blow"])
                instance.securityStatus = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["security_status"])
                instance.shipTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ship_type_id"])
                instance.weaponTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weapon_type_id"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOkVictim]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOkVictim].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOkVictim] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOkVictim].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOkVictim
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOkVictim.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOkVictim in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOkVictim()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.damageTaken = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["damage_taken"])
                instance.factionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["faction_id"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.position = Decoders.decodeOptional(clazz: GetKillmailsKillmailIdKillmailHashOkVictimPosition.self, source: sourceDictionary["position"])
                instance.shipTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ship_type_id"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOkVictimItems]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimItems].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOkVictimItems] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimItems].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOkVictimItems
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOkVictimItems.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOkVictimItems in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOkVictimItems()
                instance.flag = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["flag"])
                instance.itemTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_type_id"])
                instance.quantityDestroyed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quantity_destroyed"])
                instance.quantityDropped = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quantity_dropped"])
                instance.singleton = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["singleton"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOkVictimItems1]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimItems1].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOkVictimItems1] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimItems1].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOkVictimItems1
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOkVictimItems1.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOkVictimItems1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOkVictimItems1()
                instance.flag = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["flag"])
                instance.itemTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_type_id"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.quantityDestroyed = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quantity_destroyed"])
                instance.quantityDropped = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["quantity_dropped"])
                instance.singleton = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["singleton"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashOkVictimPosition]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimPosition].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashOkVictimPosition] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashOkVictimPosition].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashOkVictimPosition
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashOkVictimPosition.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashOkVictimPosition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashOkVictimPosition()
                instance.x = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["x"])
                instance.y = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["y"])
                instance.z = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["z"])
                return instance
            }


            // Decoder for [GetKillmailsKillmailIdKillmailHashUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetKillmailsKillmailIdKillmailHashUnprocessableEntity].self) { (source: AnyObject) -> [GetKillmailsKillmailIdKillmailHashUnprocessableEntity] in
                return Decoders.decode(clazz: [GetKillmailsKillmailIdKillmailHashUnprocessableEntity].self, source: source)
            }
            // Decoder for GetKillmailsKillmailIdKillmailHashUnprocessableEntity
            Decoders.addDecoder(clazz: GetKillmailsKillmailIdKillmailHashUnprocessableEntity.self) { (source: AnyObject) -> GetKillmailsKillmailIdKillmailHashUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetKillmailsKillmailIdKillmailHashUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetMarketsPrices200Ok]
            Decoders.addDecoder(clazz: [GetMarketsPrices200Ok].self) { (source: AnyObject) -> [GetMarketsPrices200Ok] in
                return Decoders.decode(clazz: [GetMarketsPrices200Ok].self, source: source)
            }
            // Decoder for GetMarketsPrices200Ok
            Decoders.addDecoder(clazz: GetMarketsPrices200Ok.self) { (source: AnyObject) -> GetMarketsPrices200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsPrices200Ok()
                instance.adjustedPrice = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["adjusted_price"])
                instance.averagePrice = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["average_price"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetMarketsPricesInternalServerError]
            Decoders.addDecoder(clazz: [GetMarketsPricesInternalServerError].self) { (source: AnyObject) -> [GetMarketsPricesInternalServerError] in
                return Decoders.decode(clazz: [GetMarketsPricesInternalServerError].self, source: source)
            }
            // Decoder for GetMarketsPricesInternalServerError
            Decoders.addDecoder(clazz: GetMarketsPricesInternalServerError.self) { (source: AnyObject) -> GetMarketsPricesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsPricesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdHistory200Ok]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdHistory200Ok].self) { (source: AnyObject) -> [GetMarketsRegionIdHistory200Ok] in
                return Decoders.decode(clazz: [GetMarketsRegionIdHistory200Ok].self, source: source)
            }
            // Decoder for GetMarketsRegionIdHistory200Ok
            Decoders.addDecoder(clazz: GetMarketsRegionIdHistory200Ok.self) { (source: AnyObject) -> GetMarketsRegionIdHistory200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdHistory200Ok()
                instance.average = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["average"])
                instance.date = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date"])
                instance.highest = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["highest"])
                instance.lowest = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["lowest"])
                instance.orderCount = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["order_count"])
                instance.volume = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["volume"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdHistoryInternalServerError]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdHistoryInternalServerError].self) { (source: AnyObject) -> [GetMarketsRegionIdHistoryInternalServerError] in
                return Decoders.decode(clazz: [GetMarketsRegionIdHistoryInternalServerError].self, source: source)
            }
            // Decoder for GetMarketsRegionIdHistoryInternalServerError
            Decoders.addDecoder(clazz: GetMarketsRegionIdHistoryInternalServerError.self) { (source: AnyObject) -> GetMarketsRegionIdHistoryInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdHistoryInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdHistoryUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdHistoryUnprocessableEntity].self) { (source: AnyObject) -> [GetMarketsRegionIdHistoryUnprocessableEntity] in
                return Decoders.decode(clazz: [GetMarketsRegionIdHistoryUnprocessableEntity].self, source: source)
            }
            // Decoder for GetMarketsRegionIdHistoryUnprocessableEntity
            Decoders.addDecoder(clazz: GetMarketsRegionIdHistoryUnprocessableEntity.self) { (source: AnyObject) -> GetMarketsRegionIdHistoryUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdHistoryUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdOrders200Ok]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdOrders200Ok].self) { (source: AnyObject) -> [GetMarketsRegionIdOrders200Ok] in
                return Decoders.decode(clazz: [GetMarketsRegionIdOrders200Ok].self, source: source)
            }
            // Decoder for GetMarketsRegionIdOrders200Ok
            Decoders.addDecoder(clazz: GetMarketsRegionIdOrders200Ok.self) { (source: AnyObject) -> GetMarketsRegionIdOrders200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdOrders200Ok()
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.isBuyOrder = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_buy_order"])
                instance.issued = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["issued"])
                instance.locationId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["location_id"])
                instance.minVolume = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min_volume"])
                instance.orderId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["order_id"])
                instance.price = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["price"])
                instance.range = GetMarketsRegionIdOrders200Ok.Range(rawValue: (sourceDictionary["range"] as? String) ?? "") 
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                instance.volumeRemain = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["volume_remain"])
                instance.volumeTotal = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["volume_total"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdOrdersInternalServerError]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdOrdersInternalServerError].self) { (source: AnyObject) -> [GetMarketsRegionIdOrdersInternalServerError] in
                return Decoders.decode(clazz: [GetMarketsRegionIdOrdersInternalServerError].self, source: source)
            }
            // Decoder for GetMarketsRegionIdOrdersInternalServerError
            Decoders.addDecoder(clazz: GetMarketsRegionIdOrdersInternalServerError.self) { (source: AnyObject) -> GetMarketsRegionIdOrdersInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdOrdersInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetMarketsRegionIdOrdersUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetMarketsRegionIdOrdersUnprocessableEntity].self) { (source: AnyObject) -> [GetMarketsRegionIdOrdersUnprocessableEntity] in
                return Decoders.decode(clazz: [GetMarketsRegionIdOrdersUnprocessableEntity].self, source: source)
            }
            // Decoder for GetMarketsRegionIdOrdersUnprocessableEntity
            Decoders.addDecoder(clazz: GetMarketsRegionIdOrdersUnprocessableEntity.self) { (source: AnyObject) -> GetMarketsRegionIdOrdersUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMarketsRegionIdOrdersUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetSearchInternalServerError]
            Decoders.addDecoder(clazz: [GetSearchInternalServerError].self) { (source: AnyObject) -> [GetSearchInternalServerError] in
                return Decoders.decode(clazz: [GetSearchInternalServerError].self, source: source)
            }
            // Decoder for GetSearchInternalServerError
            Decoders.addDecoder(clazz: GetSearchInternalServerError.self) { (source: AnyObject) -> GetSearchInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSearchInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetSearchOk]
            Decoders.addDecoder(clazz: [GetSearchOk].self) { (source: AnyObject) -> [GetSearchOk] in
                return Decoders.decode(clazz: [GetSearchOk].self, source: source)
            }
            // Decoder for GetSearchOk
            Decoders.addDecoder(clazz: GetSearchOk.self) { (source: AnyObject) -> GetSearchOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSearchOk()
                instance.agent = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["agent"])
                instance.alliance = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alliance"])
                instance.character = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["character"])
                instance.constellation = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["constellation"])
                instance.corporation = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["corporation"])
                instance.faction = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["faction"])
                instance.inventorytype = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["inventorytype"])
                instance.region = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["region"])
                instance.solarsystem = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["solarsystem"])
                instance.station = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["station"])
                instance.wormhole = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["wormhole"])
                return instance
            }


            // Decoder for [GetSovereigntyCampaigns200Ok]
            Decoders.addDecoder(clazz: [GetSovereigntyCampaigns200Ok].self) { (source: AnyObject) -> [GetSovereigntyCampaigns200Ok] in
                return Decoders.decode(clazz: [GetSovereigntyCampaigns200Ok].self, source: source)
            }
            // Decoder for GetSovereigntyCampaigns200Ok
            Decoders.addDecoder(clazz: GetSovereigntyCampaigns200Ok.self) { (source: AnyObject) -> GetSovereigntyCampaigns200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSovereigntyCampaigns200Ok()
                instance.attackersScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["attackers_score"])
                instance.campaignId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["campaign_id"])
                instance.constellationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["constellation_id"])
                instance.defenderId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["defender_id"])
                instance.defenderScore = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["defender_score"])
                instance.eventType = GetSovereigntyCampaigns200Ok.EventType(rawValue: (sourceDictionary["event_type"] as? String) ?? "") 
                instance.participants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["participants"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.startTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start_time"])
                instance.structureId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["structure_id"])
                return instance
            }


            // Decoder for [GetSovereigntyCampaignsInternalServerError]
            Decoders.addDecoder(clazz: [GetSovereigntyCampaignsInternalServerError].self) { (source: AnyObject) -> [GetSovereigntyCampaignsInternalServerError] in
                return Decoders.decode(clazz: [GetSovereigntyCampaignsInternalServerError].self, source: source)
            }
            // Decoder for GetSovereigntyCampaignsInternalServerError
            Decoders.addDecoder(clazz: GetSovereigntyCampaignsInternalServerError.self) { (source: AnyObject) -> GetSovereigntyCampaignsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSovereigntyCampaignsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetSovereigntyStructures200Ok]
            Decoders.addDecoder(clazz: [GetSovereigntyStructures200Ok].self) { (source: AnyObject) -> [GetSovereigntyStructures200Ok] in
                return Decoders.decode(clazz: [GetSovereigntyStructures200Ok].self, source: source)
            }
            // Decoder for GetSovereigntyStructures200Ok
            Decoders.addDecoder(clazz: GetSovereigntyStructures200Ok.self) { (source: AnyObject) -> GetSovereigntyStructures200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSovereigntyStructures200Ok()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.structureId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["structure_id"])
                instance.structureTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["structure_type_id"])
                instance.vulnerabilityOccupancyLevel = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["vulnerability_occupancy_level"])
                instance.vulnerableEndTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["vulnerable_end_time"])
                instance.vulnerableStartTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["vulnerable_start_time"])
                return instance
            }


            // Decoder for [GetSovereigntyStructuresInternalServerError]
            Decoders.addDecoder(clazz: [GetSovereigntyStructuresInternalServerError].self) { (source: AnyObject) -> [GetSovereigntyStructuresInternalServerError] in
                return Decoders.decode(clazz: [GetSovereigntyStructuresInternalServerError].self, source: source)
            }
            // Decoder for GetSovereigntyStructuresInternalServerError
            Decoders.addDecoder(clazz: GetSovereigntyStructuresInternalServerError.self) { (source: AnyObject) -> GetSovereigntyStructuresInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetSovereigntyStructuresInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseSchematicsSchematicIdInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseSchematicsSchematicIdInternalServerError].self) { (source: AnyObject) -> [GetUniverseSchematicsSchematicIdInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseSchematicsSchematicIdInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseSchematicsSchematicIdInternalServerError
            Decoders.addDecoder(clazz: GetUniverseSchematicsSchematicIdInternalServerError.self) { (source: AnyObject) -> GetUniverseSchematicsSchematicIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSchematicsSchematicIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseSchematicsSchematicIdNotFound]
            Decoders.addDecoder(clazz: [GetUniverseSchematicsSchematicIdNotFound].self) { (source: AnyObject) -> [GetUniverseSchematicsSchematicIdNotFound] in
                return Decoders.decode(clazz: [GetUniverseSchematicsSchematicIdNotFound].self, source: source)
            }
            // Decoder for GetUniverseSchematicsSchematicIdNotFound
            Decoders.addDecoder(clazz: GetUniverseSchematicsSchematicIdNotFound.self) { (source: AnyObject) -> GetUniverseSchematicsSchematicIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSchematicsSchematicIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseSchematicsSchematicIdOk]
            Decoders.addDecoder(clazz: [GetUniverseSchematicsSchematicIdOk].self) { (source: AnyObject) -> [GetUniverseSchematicsSchematicIdOk] in
                return Decoders.decode(clazz: [GetUniverseSchematicsSchematicIdOk].self, source: source)
            }
            // Decoder for GetUniverseSchematicsSchematicIdOk
            Decoders.addDecoder(clazz: GetUniverseSchematicsSchematicIdOk.self) { (source: AnyObject) -> GetUniverseSchematicsSchematicIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSchematicsSchematicIdOk()
                instance.cycleTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["cycle_time"])
                instance.schematicName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schematic_name"])
                return instance
            }


            // Decoder for [GetUniverseStationsStationIdInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseStationsStationIdInternalServerError].self) { (source: AnyObject) -> [GetUniverseStationsStationIdInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseStationsStationIdInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseStationsStationIdInternalServerError
            Decoders.addDecoder(clazz: GetUniverseStationsStationIdInternalServerError.self) { (source: AnyObject) -> GetUniverseStationsStationIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStationsStationIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseStationsStationIdOk]
            Decoders.addDecoder(clazz: [GetUniverseStationsStationIdOk].self) { (source: AnyObject) -> [GetUniverseStationsStationIdOk] in
                return Decoders.decode(clazz: [GetUniverseStationsStationIdOk].self, source: source)
            }
            // Decoder for GetUniverseStationsStationIdOk
            Decoders.addDecoder(clazz: GetUniverseStationsStationIdOk.self) { (source: AnyObject) -> GetUniverseStationsStationIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStationsStationIdOk()
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.stationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["station_name"])
                return instance
            }


            // Decoder for [GetUniverseStructuresInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseStructuresInternalServerError].self) { (source: AnyObject) -> [GetUniverseStructuresInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseStructuresInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseStructuresInternalServerError
            Decoders.addDecoder(clazz: GetUniverseStructuresInternalServerError.self) { (source: AnyObject) -> GetUniverseStructuresInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseStructuresStructureIdForbidden]
            Decoders.addDecoder(clazz: [GetUniverseStructuresStructureIdForbidden].self) { (source: AnyObject) -> [GetUniverseStructuresStructureIdForbidden] in
                return Decoders.decode(clazz: [GetUniverseStructuresStructureIdForbidden].self, source: source)
            }
            // Decoder for GetUniverseStructuresStructureIdForbidden
            Decoders.addDecoder(clazz: GetUniverseStructuresStructureIdForbidden.self) { (source: AnyObject) -> GetUniverseStructuresStructureIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresStructureIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseStructuresStructureIdInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseStructuresStructureIdInternalServerError].self) { (source: AnyObject) -> [GetUniverseStructuresStructureIdInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseStructuresStructureIdInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseStructuresStructureIdInternalServerError
            Decoders.addDecoder(clazz: GetUniverseStructuresStructureIdInternalServerError.self) { (source: AnyObject) -> GetUniverseStructuresStructureIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresStructureIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseStructuresStructureIdNotFound]
            Decoders.addDecoder(clazz: [GetUniverseStructuresStructureIdNotFound].self) { (source: AnyObject) -> [GetUniverseStructuresStructureIdNotFound] in
                return Decoders.decode(clazz: [GetUniverseStructuresStructureIdNotFound].self, source: source)
            }
            // Decoder for GetUniverseStructuresStructureIdNotFound
            Decoders.addDecoder(clazz: GetUniverseStructuresStructureIdNotFound.self) { (source: AnyObject) -> GetUniverseStructuresStructureIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresStructureIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseStructuresStructureIdOk]
            Decoders.addDecoder(clazz: [GetUniverseStructuresStructureIdOk].self) { (source: AnyObject) -> [GetUniverseStructuresStructureIdOk] in
                return Decoders.decode(clazz: [GetUniverseStructuresStructureIdOk].self, source: source)
            }
            // Decoder for GetUniverseStructuresStructureIdOk
            Decoders.addDecoder(clazz: GetUniverseStructuresStructureIdOk.self) { (source: AnyObject) -> GetUniverseStructuresStructureIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresStructureIdOk()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.position = Decoders.decodeOptional(clazz: GetUniverseStructuresStructureIdOkPosition.self, source: sourceDictionary["position"])
                instance.solarSystemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["solar_system_id"])
                instance.typeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["type_id"])
                return instance
            }


            // Decoder for [GetUniverseStructuresStructureIdOkPosition]
            Decoders.addDecoder(clazz: [GetUniverseStructuresStructureIdOkPosition].self) { (source: AnyObject) -> [GetUniverseStructuresStructureIdOkPosition] in
                return Decoders.decode(clazz: [GetUniverseStructuresStructureIdOkPosition].self, source: source)
            }
            // Decoder for GetUniverseStructuresStructureIdOkPosition
            Decoders.addDecoder(clazz: GetUniverseStructuresStructureIdOkPosition.self) { (source: AnyObject) -> GetUniverseStructuresStructureIdOkPosition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseStructuresStructureIdOkPosition()
                instance.x = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["x"])
                instance.y = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["y"])
                instance.z = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["z"])
                return instance
            }


            // Decoder for [GetUniverseSystemsSystemIdInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseSystemsSystemIdInternalServerError].self) { (source: AnyObject) -> [GetUniverseSystemsSystemIdInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseSystemsSystemIdInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseSystemsSystemIdInternalServerError
            Decoders.addDecoder(clazz: GetUniverseSystemsSystemIdInternalServerError.self) { (source: AnyObject) -> GetUniverseSystemsSystemIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSystemsSystemIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseSystemsSystemIdNotFound]
            Decoders.addDecoder(clazz: [GetUniverseSystemsSystemIdNotFound].self) { (source: AnyObject) -> [GetUniverseSystemsSystemIdNotFound] in
                return Decoders.decode(clazz: [GetUniverseSystemsSystemIdNotFound].self, source: source)
            }
            // Decoder for GetUniverseSystemsSystemIdNotFound
            Decoders.addDecoder(clazz: GetUniverseSystemsSystemIdNotFound.self) { (source: AnyObject) -> GetUniverseSystemsSystemIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSystemsSystemIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseSystemsSystemIdOk]
            Decoders.addDecoder(clazz: [GetUniverseSystemsSystemIdOk].self) { (source: AnyObject) -> [GetUniverseSystemsSystemIdOk] in
                return Decoders.decode(clazz: [GetUniverseSystemsSystemIdOk].self, source: source)
            }
            // Decoder for GetUniverseSystemsSystemIdOk
            Decoders.addDecoder(clazz: GetUniverseSystemsSystemIdOk.self) { (source: AnyObject) -> GetUniverseSystemsSystemIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseSystemsSystemIdOk()
                instance.solarSystemName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["solar_system_name"])
                return instance
            }


            // Decoder for [GetUniverseTypesTypeIdInternalServerError]
            Decoders.addDecoder(clazz: [GetUniverseTypesTypeIdInternalServerError].self) { (source: AnyObject) -> [GetUniverseTypesTypeIdInternalServerError] in
                return Decoders.decode(clazz: [GetUniverseTypesTypeIdInternalServerError].self, source: source)
            }
            // Decoder for GetUniverseTypesTypeIdInternalServerError
            Decoders.addDecoder(clazz: GetUniverseTypesTypeIdInternalServerError.self) { (source: AnyObject) -> GetUniverseTypesTypeIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseTypesTypeIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseTypesTypeIdNotFound]
            Decoders.addDecoder(clazz: [GetUniverseTypesTypeIdNotFound].self) { (source: AnyObject) -> [GetUniverseTypesTypeIdNotFound] in
                return Decoders.decode(clazz: [GetUniverseTypesTypeIdNotFound].self, source: source)
            }
            // Decoder for GetUniverseTypesTypeIdNotFound
            Decoders.addDecoder(clazz: GetUniverseTypesTypeIdNotFound.self) { (source: AnyObject) -> GetUniverseTypesTypeIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseTypesTypeIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetUniverseTypesTypeIdOk]
            Decoders.addDecoder(clazz: [GetUniverseTypesTypeIdOk].self) { (source: AnyObject) -> [GetUniverseTypesTypeIdOk] in
                return Decoders.decode(clazz: [GetUniverseTypesTypeIdOk].self, source: source)
            }
            // Decoder for GetUniverseTypesTypeIdOk
            Decoders.addDecoder(clazz: GetUniverseTypesTypeIdOk.self) { (source: AnyObject) -> GetUniverseTypesTypeIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUniverseTypesTypeIdOk()
                instance.categoryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["category_id"])
                instance.graphicId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["graphic_id"])
                instance.groupId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["group_id"])
                instance.iconId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["icon_id"])
                instance.typeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_description"])
                instance.typeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_name"])
                return instance
            }


            // Decoder for [GetWarsInternalServerError]
            Decoders.addDecoder(clazz: [GetWarsInternalServerError].self) { (source: AnyObject) -> [GetWarsInternalServerError] in
                return Decoders.decode(clazz: [GetWarsInternalServerError].self, source: source)
            }
            // Decoder for GetWarsInternalServerError
            Decoders.addDecoder(clazz: GetWarsInternalServerError.self) { (source: AnyObject) -> GetWarsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetWarsWarIdInternalServerError]
            Decoders.addDecoder(clazz: [GetWarsWarIdInternalServerError].self) { (source: AnyObject) -> [GetWarsWarIdInternalServerError] in
                return Decoders.decode(clazz: [GetWarsWarIdInternalServerError].self, source: source)
            }
            // Decoder for GetWarsWarIdInternalServerError
            Decoders.addDecoder(clazz: GetWarsWarIdInternalServerError.self) { (source: AnyObject) -> GetWarsWarIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetWarsWarIdKillmails200Ok]
            Decoders.addDecoder(clazz: [GetWarsWarIdKillmails200Ok].self) { (source: AnyObject) -> [GetWarsWarIdKillmails200Ok] in
                return Decoders.decode(clazz: [GetWarsWarIdKillmails200Ok].self, source: source)
            }
            // Decoder for GetWarsWarIdKillmails200Ok
            Decoders.addDecoder(clazz: GetWarsWarIdKillmails200Ok.self) { (source: AnyObject) -> GetWarsWarIdKillmails200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdKillmails200Ok()
                instance.killmailHash = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["killmail_hash"])
                instance.killmailId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["killmail_id"])
                return instance
            }


            // Decoder for [GetWarsWarIdKillmailsInternalServerError]
            Decoders.addDecoder(clazz: [GetWarsWarIdKillmailsInternalServerError].self) { (source: AnyObject) -> [GetWarsWarIdKillmailsInternalServerError] in
                return Decoders.decode(clazz: [GetWarsWarIdKillmailsInternalServerError].self, source: source)
            }
            // Decoder for GetWarsWarIdKillmailsInternalServerError
            Decoders.addDecoder(clazz: GetWarsWarIdKillmailsInternalServerError.self) { (source: AnyObject) -> GetWarsWarIdKillmailsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdKillmailsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetWarsWarIdKillmailsUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetWarsWarIdKillmailsUnprocessableEntity].self) { (source: AnyObject) -> [GetWarsWarIdKillmailsUnprocessableEntity] in
                return Decoders.decode(clazz: [GetWarsWarIdKillmailsUnprocessableEntity].self, source: source)
            }
            // Decoder for GetWarsWarIdKillmailsUnprocessableEntity
            Decoders.addDecoder(clazz: GetWarsWarIdKillmailsUnprocessableEntity.self) { (source: AnyObject) -> GetWarsWarIdKillmailsUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdKillmailsUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [GetWarsWarIdOk]
            Decoders.addDecoder(clazz: [GetWarsWarIdOk].self) { (source: AnyObject) -> [GetWarsWarIdOk] in
                return Decoders.decode(clazz: [GetWarsWarIdOk].self, source: source)
            }
            // Decoder for GetWarsWarIdOk
            Decoders.addDecoder(clazz: GetWarsWarIdOk.self) { (source: AnyObject) -> GetWarsWarIdOk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdOk()
                instance.aggressor = Decoders.decodeOptional(clazz: GetWarsWarIdOkAggressor.self, source: sourceDictionary["aggressor"])
                instance.allies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["allies"])
                instance.declared = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["declared"])
                instance.defender = Decoders.decodeOptional(clazz: GetWarsWarIdOkDefender.self, source: sourceDictionary["defender"])
                instance.finished = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["finished"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.mutual = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["mutual"])
                instance.openForAllies = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["open_for_allies"])
                instance.retracted = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["retracted"])
                instance.started = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["started"])
                return instance
            }


            // Decoder for [GetWarsWarIdOkAggressor]
            Decoders.addDecoder(clazz: [GetWarsWarIdOkAggressor].self) { (source: AnyObject) -> [GetWarsWarIdOkAggressor] in
                return Decoders.decode(clazz: [GetWarsWarIdOkAggressor].self, source: source)
            }
            // Decoder for GetWarsWarIdOkAggressor
            Decoders.addDecoder(clazz: GetWarsWarIdOkAggressor.self) { (source: AnyObject) -> GetWarsWarIdOkAggressor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdOkAggressor()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.iskDestroyed = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["isk_destroyed"])
                instance.shipsKilled = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ships_killed"])
                return instance
            }


            // Decoder for [GetWarsWarIdOkAllies]
            Decoders.addDecoder(clazz: [GetWarsWarIdOkAllies].self) { (source: AnyObject) -> [GetWarsWarIdOkAllies] in
                return Decoders.decode(clazz: [GetWarsWarIdOkAllies].self, source: source)
            }
            // Decoder for GetWarsWarIdOkAllies
            Decoders.addDecoder(clazz: GetWarsWarIdOkAllies.self) { (source: AnyObject) -> GetWarsWarIdOkAllies in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdOkAllies()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                return instance
            }


            // Decoder for [GetWarsWarIdOkDefender]
            Decoders.addDecoder(clazz: [GetWarsWarIdOkDefender].self) { (source: AnyObject) -> [GetWarsWarIdOkDefender] in
                return Decoders.decode(clazz: [GetWarsWarIdOkDefender].self, source: source)
            }
            // Decoder for GetWarsWarIdOkDefender
            Decoders.addDecoder(clazz: GetWarsWarIdOkDefender.self) { (source: AnyObject) -> GetWarsWarIdOkDefender in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdOkDefender()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.corporationId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["corporation_id"])
                instance.iskDestroyed = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["isk_destroyed"])
                instance.shipsKilled = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ships_killed"])
                return instance
            }


            // Decoder for [GetWarsWarIdUnprocessableEntity]
            Decoders.addDecoder(clazz: [GetWarsWarIdUnprocessableEntity].self) { (source: AnyObject) -> [GetWarsWarIdUnprocessableEntity] in
                return Decoders.decode(clazz: [GetWarsWarIdUnprocessableEntity].self, source: source)
            }
            // Decoder for GetWarsWarIdUnprocessableEntity
            Decoders.addDecoder(clazz: GetWarsWarIdUnprocessableEntity.self) { (source: AnyObject) -> GetWarsWarIdUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetWarsWarIdUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [IndustrysystemsCostIndices]
            Decoders.addDecoder(clazz: [IndustrysystemsCostIndices].self) { (source: AnyObject) -> [IndustrysystemsCostIndices] in
                return Decoders.decode(clazz: [IndustrysystemsCostIndices].self, source: source)
            }
            // Decoder for IndustrysystemsCostIndices
            Decoders.addDecoder(clazz: IndustrysystemsCostIndices.self) { (source: AnyObject) -> IndustrysystemsCostIndices in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IndustrysystemsCostIndices()
                instance.activity = IndustrysystemsCostIndices.Activity(rawValue: (sourceDictionary["activity"] as? String) ?? "") 
                instance.costIndex = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["cost_index"])
                return instance
            }


            // Decoder for [InsurancepricesLevels]
            Decoders.addDecoder(clazz: [InsurancepricesLevels].self) { (source: AnyObject) -> [InsurancepricesLevels] in
                return Decoders.decode(clazz: [InsurancepricesLevels].self, source: source)
            }
            // Decoder for InsurancepricesLevels
            Decoders.addDecoder(clazz: InsurancepricesLevels.self) { (source: AnyObject) -> InsurancepricesLevels in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InsurancepricesLevels()
                instance.cost = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["cost"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.payout = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["payout"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdCspaCharacters]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdCspaCharacters].self) { (source: AnyObject) -> [PostCharactersCharacterIdCspaCharacters] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdCspaCharacters].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdCspaCharacters
            Decoders.addDecoder(clazz: PostCharactersCharacterIdCspaCharacters.self) { (source: AnyObject) -> PostCharactersCharacterIdCspaCharacters in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdCspaCharacters()
                instance.characters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["characters"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdCspaCreated]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdCspaCreated].self) { (source: AnyObject) -> [PostCharactersCharacterIdCspaCreated] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdCspaCreated].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdCspaCreated
            Decoders.addDecoder(clazz: PostCharactersCharacterIdCspaCreated.self) { (source: AnyObject) -> PostCharactersCharacterIdCspaCreated in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdCspaCreated()
                instance.cost = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["cost"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdCspaForbidden]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdCspaForbidden].self) { (source: AnyObject) -> [PostCharactersCharacterIdCspaForbidden] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdCspaForbidden].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdCspaForbidden
            Decoders.addDecoder(clazz: PostCharactersCharacterIdCspaForbidden.self) { (source: AnyObject) -> PostCharactersCharacterIdCspaForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdCspaForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdCspaInternalServerError]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdCspaInternalServerError].self) { (source: AnyObject) -> [PostCharactersCharacterIdCspaInternalServerError] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdCspaInternalServerError].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdCspaInternalServerError
            Decoders.addDecoder(clazz: PostCharactersCharacterIdCspaInternalServerError.self) { (source: AnyObject) -> PostCharactersCharacterIdCspaInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdCspaInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailBadRequest]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailBadRequest].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailBadRequest] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailBadRequest].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailBadRequest
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailBadRequest.self) { (source: AnyObject) -> PostCharactersCharacterIdMailBadRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailBadRequest()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailForbidden]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailForbidden].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailForbidden] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailForbidden].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailForbidden
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailForbidden.self) { (source: AnyObject) -> PostCharactersCharacterIdMailForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailInternalServerError]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailInternalServerError].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailInternalServerError] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailInternalServerError].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailInternalServerError
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailInternalServerError.self) { (source: AnyObject) -> PostCharactersCharacterIdMailInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailLabelsForbidden]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailLabelsForbidden].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailLabelsForbidden] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailLabelsForbidden].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailLabelsForbidden
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailLabelsForbidden.self) { (source: AnyObject) -> PostCharactersCharacterIdMailLabelsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailLabelsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailLabelsInternalServerError]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailLabelsInternalServerError].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailLabelsInternalServerError] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailLabelsInternalServerError].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailLabelsInternalServerError
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailLabelsInternalServerError.self) { (source: AnyObject) -> PostCharactersCharacterIdMailLabelsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailLabelsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailLabelsLabel]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailLabelsLabel].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailLabelsLabel] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailLabelsLabel].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailLabelsLabel
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailLabelsLabel.self) { (source: AnyObject) -> PostCharactersCharacterIdMailLabelsLabel in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailLabelsLabel()
                instance.color = PostCharactersCharacterIdMailLabelsLabel.Color(rawValue: (sourceDictionary["color"] as? String) ?? "") 
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [PostCharactersCharacterIdMailMail]
            Decoders.addDecoder(clazz: [PostCharactersCharacterIdMailMail].self) { (source: AnyObject) -> [PostCharactersCharacterIdMailMail] in
                return Decoders.decode(clazz: [PostCharactersCharacterIdMailMail].self, source: source)
            }
            // Decoder for PostCharactersCharacterIdMailMail
            Decoders.addDecoder(clazz: PostCharactersCharacterIdMailMail.self) { (source: AnyObject) -> PostCharactersCharacterIdMailMail in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostCharactersCharacterIdMailMail()
                instance.approvedCost = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["approved_cost"])
                instance.body = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"])
                instance.recipients = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["recipients"])
                instance.subject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdMembersForbidden]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdMembersForbidden].self) { (source: AnyObject) -> [PostFleetsFleetIdMembersForbidden] in
                return Decoders.decode(clazz: [PostFleetsFleetIdMembersForbidden].self, source: source)
            }
            // Decoder for PostFleetsFleetIdMembersForbidden
            Decoders.addDecoder(clazz: PostFleetsFleetIdMembersForbidden.self) { (source: AnyObject) -> PostFleetsFleetIdMembersForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdMembersForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdMembersInternalServerError]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdMembersInternalServerError].self) { (source: AnyObject) -> [PostFleetsFleetIdMembersInternalServerError] in
                return Decoders.decode(clazz: [PostFleetsFleetIdMembersInternalServerError].self, source: source)
            }
            // Decoder for PostFleetsFleetIdMembersInternalServerError
            Decoders.addDecoder(clazz: PostFleetsFleetIdMembersInternalServerError.self) { (source: AnyObject) -> PostFleetsFleetIdMembersInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdMembersInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdMembersInvitation]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdMembersInvitation].self) { (source: AnyObject) -> [PostFleetsFleetIdMembersInvitation] in
                return Decoders.decode(clazz: [PostFleetsFleetIdMembersInvitation].self, source: source)
            }
            // Decoder for PostFleetsFleetIdMembersInvitation
            Decoders.addDecoder(clazz: PostFleetsFleetIdMembersInvitation.self) { (source: AnyObject) -> PostFleetsFleetIdMembersInvitation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdMembersInvitation()
                instance.characterId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["character_id"])
                instance.role = PostFleetsFleetIdMembersInvitation.Role(rawValue: (sourceDictionary["role"] as? String) ?? "") 
                instance.squadId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["squad_id"])
                instance.wingId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["wing_id"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdMembersNotFound]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdMembersNotFound].self) { (source: AnyObject) -> [PostFleetsFleetIdMembersNotFound] in
                return Decoders.decode(clazz: [PostFleetsFleetIdMembersNotFound].self, source: source)
            }
            // Decoder for PostFleetsFleetIdMembersNotFound
            Decoders.addDecoder(clazz: PostFleetsFleetIdMembersNotFound.self) { (source: AnyObject) -> PostFleetsFleetIdMembersNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdMembersNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdMembersUnprocessableEntity]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdMembersUnprocessableEntity].self) { (source: AnyObject) -> [PostFleetsFleetIdMembersUnprocessableEntity] in
                return Decoders.decode(clazz: [PostFleetsFleetIdMembersUnprocessableEntity].self, source: source)
            }
            // Decoder for PostFleetsFleetIdMembersUnprocessableEntity
            Decoders.addDecoder(clazz: PostFleetsFleetIdMembersUnprocessableEntity.self) { (source: AnyObject) -> PostFleetsFleetIdMembersUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdMembersUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsCreated]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsCreated].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsCreated] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsCreated].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsCreated
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsCreated.self) { (source: AnyObject) -> PostFleetsFleetIdWingsCreated in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsCreated()
                instance.wingId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["wing_id"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsForbidden]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsForbidden].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsForbidden] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsForbidden].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsForbidden
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsForbidden.self) { (source: AnyObject) -> PostFleetsFleetIdWingsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsInternalServerError]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsInternalServerError].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsInternalServerError] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsInternalServerError].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsInternalServerError
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsInternalServerError.self) { (source: AnyObject) -> PostFleetsFleetIdWingsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsNotFound]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsNotFound].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsNotFound] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsNotFound].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsNotFound
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsNotFound.self) { (source: AnyObject) -> PostFleetsFleetIdWingsNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsWingIdSquadsCreated]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsWingIdSquadsCreated].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsWingIdSquadsCreated] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsWingIdSquadsCreated].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsWingIdSquadsCreated
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsWingIdSquadsCreated.self) { (source: AnyObject) -> PostFleetsFleetIdWingsWingIdSquadsCreated in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsWingIdSquadsCreated()
                instance.squadId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["squad_id"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsWingIdSquadsForbidden]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsWingIdSquadsForbidden].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsWingIdSquadsForbidden] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsWingIdSquadsForbidden].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsWingIdSquadsForbidden
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsWingIdSquadsForbidden.self) { (source: AnyObject) -> PostFleetsFleetIdWingsWingIdSquadsForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsWingIdSquadsForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsWingIdSquadsInternalServerError]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsWingIdSquadsInternalServerError].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsWingIdSquadsInternalServerError] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsWingIdSquadsInternalServerError].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsWingIdSquadsInternalServerError
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsWingIdSquadsInternalServerError.self) { (source: AnyObject) -> PostFleetsFleetIdWingsWingIdSquadsInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsWingIdSquadsInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostFleetsFleetIdWingsWingIdSquadsNotFound]
            Decoders.addDecoder(clazz: [PostFleetsFleetIdWingsWingIdSquadsNotFound].self) { (source: AnyObject) -> [PostFleetsFleetIdWingsWingIdSquadsNotFound] in
                return Decoders.decode(clazz: [PostFleetsFleetIdWingsWingIdSquadsNotFound].self, source: source)
            }
            // Decoder for PostFleetsFleetIdWingsWingIdSquadsNotFound
            Decoders.addDecoder(clazz: PostFleetsFleetIdWingsWingIdSquadsNotFound.self) { (source: AnyObject) -> PostFleetsFleetIdWingsWingIdSquadsNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostFleetsFleetIdWingsWingIdSquadsNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostUniverseNames200Ok]
            Decoders.addDecoder(clazz: [PostUniverseNames200Ok].self) { (source: AnyObject) -> [PostUniverseNames200Ok] in
                return Decoders.decode(clazz: [PostUniverseNames200Ok].self, source: source)
            }
            // Decoder for PostUniverseNames200Ok
            Decoders.addDecoder(clazz: PostUniverseNames200Ok.self) { (source: AnyObject) -> PostUniverseNames200Ok in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUniverseNames200Ok()
                instance.category = PostUniverseNames200Ok.Category(rawValue: (sourceDictionary["category"] as? String) ?? "") 
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [PostUniverseNamesIds]
            Decoders.addDecoder(clazz: [PostUniverseNamesIds].self) { (source: AnyObject) -> [PostUniverseNamesIds] in
                return Decoders.decode(clazz: [PostUniverseNamesIds].self, source: source)
            }
            // Decoder for PostUniverseNamesIds
            Decoders.addDecoder(clazz: PostUniverseNamesIds.self) { (source: AnyObject) -> PostUniverseNamesIds in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUniverseNamesIds()
                instance.ids = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["ids"])
                return instance
            }


            // Decoder for [PostUniverseNamesInternalServerError]
            Decoders.addDecoder(clazz: [PostUniverseNamesInternalServerError].self) { (source: AnyObject) -> [PostUniverseNamesInternalServerError] in
                return Decoders.decode(clazz: [PostUniverseNamesInternalServerError].self, source: source)
            }
            // Decoder for PostUniverseNamesInternalServerError
            Decoders.addDecoder(clazz: PostUniverseNamesInternalServerError.self) { (source: AnyObject) -> PostUniverseNamesInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUniverseNamesInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PostUniverseNamesNotFound]
            Decoders.addDecoder(clazz: [PostUniverseNamesNotFound].self) { (source: AnyObject) -> [PostUniverseNamesNotFound] in
                return Decoders.decode(clazz: [PostUniverseNamesNotFound].self, source: source)
            }
            // Decoder for PostUniverseNamesNotFound
            Decoders.addDecoder(clazz: PostUniverseNamesNotFound.self) { (source: AnyObject) -> PostUniverseNamesNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostUniverseNamesNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdCalendarEventIdForbidden]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdCalendarEventIdForbidden].self) { (source: AnyObject) -> [PutCharactersCharacterIdCalendarEventIdForbidden] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdCalendarEventIdForbidden].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdCalendarEventIdForbidden
            Decoders.addDecoder(clazz: PutCharactersCharacterIdCalendarEventIdForbidden.self) { (source: AnyObject) -> PutCharactersCharacterIdCalendarEventIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdCalendarEventIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdCalendarEventIdInternalServerError]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdCalendarEventIdInternalServerError].self) { (source: AnyObject) -> [PutCharactersCharacterIdCalendarEventIdInternalServerError] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdCalendarEventIdInternalServerError].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdCalendarEventIdInternalServerError
            Decoders.addDecoder(clazz: PutCharactersCharacterIdCalendarEventIdInternalServerError.self) { (source: AnyObject) -> PutCharactersCharacterIdCalendarEventIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdCalendarEventIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdCalendarEventIdResponse]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdCalendarEventIdResponse].self) { (source: AnyObject) -> [PutCharactersCharacterIdCalendarEventIdResponse] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdCalendarEventIdResponse].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdCalendarEventIdResponse
            Decoders.addDecoder(clazz: PutCharactersCharacterIdCalendarEventIdResponse.self) { (source: AnyObject) -> PutCharactersCharacterIdCalendarEventIdResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdCalendarEventIdResponse()
                instance.response = PutCharactersCharacterIdCalendarEventIdResponse.Response(rawValue: (sourceDictionary["response"] as? String) ?? "") 
                return instance
            }


            // Decoder for [PutCharactersCharacterIdMailMailIdBadRequest]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdMailMailIdBadRequest].self) { (source: AnyObject) -> [PutCharactersCharacterIdMailMailIdBadRequest] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdMailMailIdBadRequest].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdMailMailIdBadRequest
            Decoders.addDecoder(clazz: PutCharactersCharacterIdMailMailIdBadRequest.self) { (source: AnyObject) -> PutCharactersCharacterIdMailMailIdBadRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdMailMailIdBadRequest()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdMailMailIdContents]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdMailMailIdContents].self) { (source: AnyObject) -> [PutCharactersCharacterIdMailMailIdContents] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdMailMailIdContents].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdMailMailIdContents
            Decoders.addDecoder(clazz: PutCharactersCharacterIdMailMailIdContents.self) { (source: AnyObject) -> PutCharactersCharacterIdMailMailIdContents in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdMailMailIdContents()
                instance.labels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["labels"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdMailMailIdForbidden]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdMailMailIdForbidden].self) { (source: AnyObject) -> [PutCharactersCharacterIdMailMailIdForbidden] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdMailMailIdForbidden].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdMailMailIdForbidden
            Decoders.addDecoder(clazz: PutCharactersCharacterIdMailMailIdForbidden.self) { (source: AnyObject) -> PutCharactersCharacterIdMailMailIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdMailMailIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutCharactersCharacterIdMailMailIdInternalServerError]
            Decoders.addDecoder(clazz: [PutCharactersCharacterIdMailMailIdInternalServerError].self) { (source: AnyObject) -> [PutCharactersCharacterIdMailMailIdInternalServerError] in
                return Decoders.decode(clazz: [PutCharactersCharacterIdMailMailIdInternalServerError].self, source: source)
            }
            // Decoder for PutCharactersCharacterIdMailMailIdInternalServerError
            Decoders.addDecoder(clazz: PutCharactersCharacterIdMailMailIdInternalServerError.self) { (source: AnyObject) -> PutCharactersCharacterIdMailMailIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutCharactersCharacterIdMailMailIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdBadRequest]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdBadRequest].self) { (source: AnyObject) -> [PutFleetsFleetIdBadRequest] in
                return Decoders.decode(clazz: [PutFleetsFleetIdBadRequest].self, source: source)
            }
            // Decoder for PutFleetsFleetIdBadRequest
            Decoders.addDecoder(clazz: PutFleetsFleetIdBadRequest.self) { (source: AnyObject) -> PutFleetsFleetIdBadRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdBadRequest()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdForbidden]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdForbidden].self) { (source: AnyObject) -> [PutFleetsFleetIdForbidden] in
                return Decoders.decode(clazz: [PutFleetsFleetIdForbidden].self, source: source)
            }
            // Decoder for PutFleetsFleetIdForbidden
            Decoders.addDecoder(clazz: PutFleetsFleetIdForbidden.self) { (source: AnyObject) -> PutFleetsFleetIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdInternalServerError]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdInternalServerError].self) { (source: AnyObject) -> [PutFleetsFleetIdInternalServerError] in
                return Decoders.decode(clazz: [PutFleetsFleetIdInternalServerError].self, source: source)
            }
            // Decoder for PutFleetsFleetIdInternalServerError
            Decoders.addDecoder(clazz: PutFleetsFleetIdInternalServerError.self) { (source: AnyObject) -> PutFleetsFleetIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdMembersMemberIdForbidden]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdMembersMemberIdForbidden].self) { (source: AnyObject) -> [PutFleetsFleetIdMembersMemberIdForbidden] in
                return Decoders.decode(clazz: [PutFleetsFleetIdMembersMemberIdForbidden].self, source: source)
            }
            // Decoder for PutFleetsFleetIdMembersMemberIdForbidden
            Decoders.addDecoder(clazz: PutFleetsFleetIdMembersMemberIdForbidden.self) { (source: AnyObject) -> PutFleetsFleetIdMembersMemberIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdMembersMemberIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdMembersMemberIdInternalServerError]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdMembersMemberIdInternalServerError].self) { (source: AnyObject) -> [PutFleetsFleetIdMembersMemberIdInternalServerError] in
                return Decoders.decode(clazz: [PutFleetsFleetIdMembersMemberIdInternalServerError].self, source: source)
            }
            // Decoder for PutFleetsFleetIdMembersMemberIdInternalServerError
            Decoders.addDecoder(clazz: PutFleetsFleetIdMembersMemberIdInternalServerError.self) { (source: AnyObject) -> PutFleetsFleetIdMembersMemberIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdMembersMemberIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdMembersMemberIdMovement]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdMembersMemberIdMovement].self) { (source: AnyObject) -> [PutFleetsFleetIdMembersMemberIdMovement] in
                return Decoders.decode(clazz: [PutFleetsFleetIdMembersMemberIdMovement].self, source: source)
            }
            // Decoder for PutFleetsFleetIdMembersMemberIdMovement
            Decoders.addDecoder(clazz: PutFleetsFleetIdMembersMemberIdMovement.self) { (source: AnyObject) -> PutFleetsFleetIdMembersMemberIdMovement in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdMembersMemberIdMovement()
                instance.role = PutFleetsFleetIdMembersMemberIdMovement.Role(rawValue: (sourceDictionary["role"] as? String) ?? "") 
                instance.squadId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["squad_id"])
                instance.wingId = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["wing_id"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdMembersMemberIdNotFound]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdMembersMemberIdNotFound].self) { (source: AnyObject) -> [PutFleetsFleetIdMembersMemberIdNotFound] in
                return Decoders.decode(clazz: [PutFleetsFleetIdMembersMemberIdNotFound].self, source: source)
            }
            // Decoder for PutFleetsFleetIdMembersMemberIdNotFound
            Decoders.addDecoder(clazz: PutFleetsFleetIdMembersMemberIdNotFound.self) { (source: AnyObject) -> PutFleetsFleetIdMembersMemberIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdMembersMemberIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdMembersMemberIdUnprocessableEntity]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdMembersMemberIdUnprocessableEntity].self) { (source: AnyObject) -> [PutFleetsFleetIdMembersMemberIdUnprocessableEntity] in
                return Decoders.decode(clazz: [PutFleetsFleetIdMembersMemberIdUnprocessableEntity].self, source: source)
            }
            // Decoder for PutFleetsFleetIdMembersMemberIdUnprocessableEntity
            Decoders.addDecoder(clazz: PutFleetsFleetIdMembersMemberIdUnprocessableEntity.self) { (source: AnyObject) -> PutFleetsFleetIdMembersMemberIdUnprocessableEntity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdMembersMemberIdUnprocessableEntity()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdNewSettings]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdNewSettings].self) { (source: AnyObject) -> [PutFleetsFleetIdNewSettings] in
                return Decoders.decode(clazz: [PutFleetsFleetIdNewSettings].self, source: source)
            }
            // Decoder for PutFleetsFleetIdNewSettings
            Decoders.addDecoder(clazz: PutFleetsFleetIdNewSettings.self) { (source: AnyObject) -> PutFleetsFleetIdNewSettings in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdNewSettings()
                instance.isFreeMove = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_free_move"])
                instance.motd = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["motd"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdNotFound]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdNotFound].self) { (source: AnyObject) -> [PutFleetsFleetIdNotFound] in
                return Decoders.decode(clazz: [PutFleetsFleetIdNotFound].self, source: source)
            }
            // Decoder for PutFleetsFleetIdNotFound
            Decoders.addDecoder(clazz: PutFleetsFleetIdNotFound.self) { (source: AnyObject) -> PutFleetsFleetIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdSquadsSquadIdForbidden]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdSquadsSquadIdForbidden].self) { (source: AnyObject) -> [PutFleetsFleetIdSquadsSquadIdForbidden] in
                return Decoders.decode(clazz: [PutFleetsFleetIdSquadsSquadIdForbidden].self, source: source)
            }
            // Decoder for PutFleetsFleetIdSquadsSquadIdForbidden
            Decoders.addDecoder(clazz: PutFleetsFleetIdSquadsSquadIdForbidden.self) { (source: AnyObject) -> PutFleetsFleetIdSquadsSquadIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdSquadsSquadIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdSquadsSquadIdInternalServerError]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdSquadsSquadIdInternalServerError].self) { (source: AnyObject) -> [PutFleetsFleetIdSquadsSquadIdInternalServerError] in
                return Decoders.decode(clazz: [PutFleetsFleetIdSquadsSquadIdInternalServerError].self, source: source)
            }
            // Decoder for PutFleetsFleetIdSquadsSquadIdInternalServerError
            Decoders.addDecoder(clazz: PutFleetsFleetIdSquadsSquadIdInternalServerError.self) { (source: AnyObject) -> PutFleetsFleetIdSquadsSquadIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdSquadsSquadIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdSquadsSquadIdNaming]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdSquadsSquadIdNaming].self) { (source: AnyObject) -> [PutFleetsFleetIdSquadsSquadIdNaming] in
                return Decoders.decode(clazz: [PutFleetsFleetIdSquadsSquadIdNaming].self, source: source)
            }
            // Decoder for PutFleetsFleetIdSquadsSquadIdNaming
            Decoders.addDecoder(clazz: PutFleetsFleetIdSquadsSquadIdNaming.self) { (source: AnyObject) -> PutFleetsFleetIdSquadsSquadIdNaming in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdSquadsSquadIdNaming()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdSquadsSquadIdNotFound]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdSquadsSquadIdNotFound].self) { (source: AnyObject) -> [PutFleetsFleetIdSquadsSquadIdNotFound] in
                return Decoders.decode(clazz: [PutFleetsFleetIdSquadsSquadIdNotFound].self, source: source)
            }
            // Decoder for PutFleetsFleetIdSquadsSquadIdNotFound
            Decoders.addDecoder(clazz: PutFleetsFleetIdSquadsSquadIdNotFound.self) { (source: AnyObject) -> PutFleetsFleetIdSquadsSquadIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdSquadsSquadIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdWingsWingIdForbidden]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdWingsWingIdForbidden].self) { (source: AnyObject) -> [PutFleetsFleetIdWingsWingIdForbidden] in
                return Decoders.decode(clazz: [PutFleetsFleetIdWingsWingIdForbidden].self, source: source)
            }
            // Decoder for PutFleetsFleetIdWingsWingIdForbidden
            Decoders.addDecoder(clazz: PutFleetsFleetIdWingsWingIdForbidden.self) { (source: AnyObject) -> PutFleetsFleetIdWingsWingIdForbidden in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdWingsWingIdForbidden()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdWingsWingIdInternalServerError]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdWingsWingIdInternalServerError].self) { (source: AnyObject) -> [PutFleetsFleetIdWingsWingIdInternalServerError] in
                return Decoders.decode(clazz: [PutFleetsFleetIdWingsWingIdInternalServerError].self, source: source)
            }
            // Decoder for PutFleetsFleetIdWingsWingIdInternalServerError
            Decoders.addDecoder(clazz: PutFleetsFleetIdWingsWingIdInternalServerError.self) { (source: AnyObject) -> PutFleetsFleetIdWingsWingIdInternalServerError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdWingsWingIdInternalServerError()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdWingsWingIdNaming]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdWingsWingIdNaming].self) { (source: AnyObject) -> [PutFleetsFleetIdWingsWingIdNaming] in
                return Decoders.decode(clazz: [PutFleetsFleetIdWingsWingIdNaming].self, source: source)
            }
            // Decoder for PutFleetsFleetIdWingsWingIdNaming
            Decoders.addDecoder(clazz: PutFleetsFleetIdWingsWingIdNaming.self) { (source: AnyObject) -> PutFleetsFleetIdWingsWingIdNaming in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdWingsWingIdNaming()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [PutFleetsFleetIdWingsWingIdNotFound]
            Decoders.addDecoder(clazz: [PutFleetsFleetIdWingsWingIdNotFound].self) { (source: AnyObject) -> [PutFleetsFleetIdWingsWingIdNotFound] in
                return Decoders.decode(clazz: [PutFleetsFleetIdWingsWingIdNotFound].self, source: source)
            }
            // Decoder for PutFleetsFleetIdWingsWingIdNotFound
            Decoders.addDecoder(clazz: PutFleetsFleetIdWingsWingIdNotFound.self) { (source: AnyObject) -> PutFleetsFleetIdWingsWingIdNotFound in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PutFleetsFleetIdWingsWingIdNotFound()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                return instance
            }


            // Decoder for [SovereigntycampaignsParticipants]
            Decoders.addDecoder(clazz: [SovereigntycampaignsParticipants].self) { (source: AnyObject) -> [SovereigntycampaignsParticipants] in
                return Decoders.decode(clazz: [SovereigntycampaignsParticipants].self, source: source)
            }
            // Decoder for SovereigntycampaignsParticipants
            Decoders.addDecoder(clazz: SovereigntycampaignsParticipants.self) { (source: AnyObject) -> SovereigntycampaignsParticipants in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SovereigntycampaignsParticipants()
                instance.allianceId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["alliance_id"])
                instance.score = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["score"])
                return instance
            }
        }
    }
}
