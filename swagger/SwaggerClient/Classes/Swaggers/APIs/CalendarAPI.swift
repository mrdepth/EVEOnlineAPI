//
// CalendarAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CalendarAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdCalendar: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List calendar event summaries
     
     - parameter characterId: (path) The character to retrieve events from 
     - parameter fromEvent: (query) The event ID to retrieve events from (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdCalendar(characterId characterId: Int64, fromEvent: Int32? = nil, datasource: Datasource_getCharactersCharacterIdCalendar? = nil, completion: ((data: [GetCharactersCharacterIdCalendar200Ok]?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdCalendarWithRequestBuilder(characterId: characterId, fromEvent: fromEvent, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List calendar event summaries
     - GET /characters/{characterId}/calendar/
     - Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.   ---  Alternate route: `/v1/characters/{character_id}/calendar/`  Alternate route: `/legacy/characters/{character_id}/calendar/`  Alternate route: `/dev/characters/{character_id}/calendar/`   ---  This route is cached for up to 5 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "event_date" : "2016-06-26T20:00:00Z",
  "event_id" : 1386435,
  "event_response" : "accepted",
  "importance" : 0,
  "title" : "o7 The EVE Online Show"
} ]}]
     
     - parameter characterId: (path) The character to retrieve events from 
     - parameter fromEvent: (query) The event ID to retrieve events from (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetCharactersCharacterIdCalendar200Ok]> 
     */
    public class func getCharactersCharacterIdCalendarWithRequestBuilder(characterId characterId: Int64, fromEvent: Int32? = nil, datasource: Datasource_getCharactersCharacterIdCalendar? = nil) -> RequestBuilder<[GetCharactersCharacterIdCalendar200Ok]> {
        var path = "/characters/{characterId}/calendar/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "from_event": fromEvent?.encodeToJSON(),
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdCalendar200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdCalendarEventId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get an event
     
     - parameter characterId: (path) The character id requesting the event 
     - parameter eventId: (path) The id of the event requested 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdCalendarEventId(characterId characterId: Int64, eventId: Int32, datasource: Datasource_getCharactersCharacterIdCalendarEventId? = nil, completion: ((data: GetCharactersCharacterIdCalendarEventIdOk?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdCalendarEventIdWithRequestBuilder(characterId: characterId, eventId: eventId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get an event
     - GET /characters/{characterId}/calendar/{eventId}/
     - Get all the information for a specific event  ---  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`   ---  This route is cached for up to 5 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "date" : "2016-06-26T21:00:00Z",
  "duration" : 60,
  "event_id" : 1386435,
  "importance" : 1,
  "owner_id" : 1,
  "owner_name" : "EVE System",
  "owner_type" : "eve_server",
  "response" : "Undecided",
  "text" : "o7: The EVE Online Show features latest developer news, fast paced action, community overviews and a lot more with CCP Guard and CCP Mimic. Join the thrilling o7 live broadcast at 20:00 EVE time (=UTC) on <a href=\"http://www.twitch.tv/ccp\">EVE TV</a>. Don't miss it!",
  "title" : "o7 The EVE Online Show"
}}]
     
     - parameter characterId: (path) The character id requesting the event 
     - parameter eventId: (path) The id of the event requested 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetCharactersCharacterIdCalendarEventIdOk> 
     */
    public class func getCharactersCharacterIdCalendarEventIdWithRequestBuilder(characterId characterId: Int64, eventId: Int32, datasource: Datasource_getCharactersCharacterIdCalendarEventId? = nil) -> RequestBuilder<GetCharactersCharacterIdCalendarEventIdOk> {
        var path = "/characters/{characterId}/calendar/{eventId}/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{eventId}", withString: "\(eventId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetCharactersCharacterIdCalendarEventIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_putCharactersCharacterIdCalendarEventId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Respond to an event
     
     - parameter characterId: (path) The character ID requesting the event 
     - parameter eventId: (path) The ID of the event requested 
     - parameter response: (body) The response value to set, overriding current value. 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putCharactersCharacterIdCalendarEventId(characterId characterId: Int32, eventId: Int32, response: PutCharactersCharacterIdCalendarEventIdResponse, datasource: Datasource_putCharactersCharacterIdCalendarEventId? = nil, completion: ((error: ErrorType?) -> Void)) {
        putCharactersCharacterIdCalendarEventIdWithRequestBuilder(characterId: characterId, eventId: eventId, response: response, datasource: datasource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Respond to an event
     - PUT /characters/{characterId}/calendar/{eventId}/
     - Set your response status to an event  ---  Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`  Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     
     - parameter characterId: (path) The character ID requesting the event 
     - parameter eventId: (path) The ID of the event requested 
     - parameter response: (body) The response value to set, overriding current value. 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<Void> 
     */
    public class func putCharactersCharacterIdCalendarEventIdWithRequestBuilder(characterId characterId: Int32, eventId: Int32, response: PutCharactersCharacterIdCalendarEventIdResponse, datasource: Datasource_putCharactersCharacterIdCalendarEventId? = nil) -> RequestBuilder<Void> {
        var path = "/characters/{characterId}/calendar/{eventId}/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{eventId}", withString: "\(eventId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = response.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
