//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SearchAPI: APIBase {
    /**
     * enum for parameter language
     */
    public enum Language_getCharactersCharacterIdSearch: String { 
        case EnUs = "en-us"
        case De = "de"
        case Fr = "fr"
        case Ru = "ru"
        case Ja = "ja"
        case Zh = "zh"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdSearch: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Search on a string
     
     - parameter characterId: (path) An EVE character ID 
     - parameter search: (query) The string to search on 
     - parameter categories: (query) Type of entities to search for 
     - parameter language: (query) Search locale (optional, default to en-us)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdSearch(characterId characterId: Int32, search: String, categories: [String], language: Language_getCharactersCharacterIdSearch? = nil, strict: Bool? = nil, datasource: Datasource_getCharactersCharacterIdSearch? = nil, completion: ((data: GetCharactersCharacterIdSearchOk?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdSearchWithRequestBuilder(characterId: characterId, search: search, categories: categories, language: language, strict: strict, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search on a string
     - GET /characters/{characterId}/search/
     - Search for entities that match a given sub-string.  ---  Alternate route: `/v2/characters/{character_id}/search/`   ---  This route is cached for up to 3600 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "solarsystem" : [ 30002510 ],
  "station" : [ 60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727 ]
}}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter search: (query) The string to search on 
     - parameter categories: (query) Type of entities to search for 
     - parameter language: (query) Search locale (optional, default to en-us)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetCharactersCharacterIdSearchOk> 
     */
    public class func getCharactersCharacterIdSearchWithRequestBuilder(characterId characterId: Int32, search: String, categories: [String], language: Language_getCharactersCharacterIdSearch? = nil, strict: Bool? = nil, datasource: Datasource_getCharactersCharacterIdSearch? = nil) -> RequestBuilder<GetCharactersCharacterIdSearchOk> {
        var path = "/characters/{characterId}/search/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "categories": categories,
            "language": language?.rawValue,
            "strict": strict,
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetCharactersCharacterIdSearchOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter language
     */
    public enum Language_getSearch: String { 
        case EnUs = "en-us"
        case De = "de"
        case Fr = "fr"
        case Ru = "ru"
        case Ja = "ja"
        case Zh = "zh"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getSearch: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Search on a string
     
     - parameter search: (query) The string to search on 
     - parameter categories: (query) Type of entities to search for 
     - parameter language: (query) Search locale (optional, default to en-us)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSearch(search search: String, categories: [String], language: Language_getSearch? = nil, strict: Bool? = nil, datasource: Datasource_getSearch? = nil, completion: ((data: GetSearchOk?, error: ErrorType?) -> Void)) {
        getSearchWithRequestBuilder(search: search, categories: categories, language: language, strict: strict, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search on a string
     - GET /search/
     - Search for entities that match a given sub-string.  ---  Alternate route: `/v1/search/`  Alternate route: `/legacy/search/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "solarsystem" : [ 30002510 ],
  "station" : [ 60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727 ]
}}]
     
     - parameter search: (query) The string to search on 
     - parameter categories: (query) Type of entities to search for 
     - parameter language: (query) Search locale (optional, default to en-us)
     - parameter strict: (query) Whether the search should be a strict match (optional, default to false)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetSearchOk> 
     */
    public class func getSearchWithRequestBuilder(search search: String, categories: [String], language: Language_getSearch? = nil, strict: Bool? = nil, datasource: Datasource_getSearch? = nil) -> RequestBuilder<GetSearchOk> {
        let path = "/search/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "search": search,
            "categories": categories,
            "language": language?.rawValue,
            "strict": strict,
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetSearchOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
