//
// AllianceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AllianceAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliances: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List all alliances
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlliances(datasource datasource: Datasource_getAlliances? = nil, completion: ((data: [Int32]?, error: ErrorType?) -> Void)) {
        getAlliancesWithRequestBuilder(datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List all alliances
     - GET /alliances/
     - List all active player alliances  ---  Alternate route: `/v1/alliances/`  Alternate route: `/legacy/alliances/`  Alternate route: `/dev/alliances/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 99000001, 99000002 ]}]
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[Int32]> 
     */
    public class func getAlliancesWithRequestBuilder(datasource datasource: Datasource_getAlliances? = nil) -> RequestBuilder<[Int32]> {
        let path = "/alliances/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Int32]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get alliance information
     
     - parameter allianceId: (path) An Eve alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlliancesAllianceId(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceId? = nil, completion: ((data: GetAlliancesAllianceIdOk?, error: ErrorType?) -> Void)) {
        getAlliancesAllianceIdWithRequestBuilder(allianceId: allianceId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get alliance information
     - GET /alliances/{allianceId}/
     - Public information about an alliance  ---  Alternate route: `/v2/alliances/{alliance_id}/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "alliance_name" : "C C P Alliance",
  "date_founded" : "2016-06-26T21:00:00Z",
  "executor_corp" : 98356193,
  "ticker" : "<C C P>"
}}]
     
     - parameter allianceId: (path) An Eve alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetAlliancesAllianceIdOk> 
     */
    public class func getAlliancesAllianceIdWithRequestBuilder(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceId? = nil) -> RequestBuilder<GetAlliancesAllianceIdOk> {
        var path = "/alliances/{allianceId}/"
        path = path.stringByReplacingOccurrencesOfString("{allianceId}", withString: "\(allianceId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetAlliancesAllianceIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceIdCorporations: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List alliance's corporations
     
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlliancesAllianceIdCorporations(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceIdCorporations? = nil, completion: ((data: [Int32]?, error: ErrorType?) -> Void)) {
        getAlliancesAllianceIdCorporationsWithRequestBuilder(allianceId: allianceId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List alliance's corporations
     - GET /alliances/{allianceId}/corporations/
     - List all current member corporations of an alliance  ---  Alternate route: `/v1/alliances/{alliance_id}/corporations/`  Alternate route: `/legacy/alliances/{alliance_id}/corporations/`  Alternate route: `/dev/alliances/{alliance_id}/corporations/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 98000001 ]}]
     
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[Int32]> 
     */
    public class func getAlliancesAllianceIdCorporationsWithRequestBuilder(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceIdCorporations? = nil) -> RequestBuilder<[Int32]> {
        var path = "/alliances/{allianceId}/corporations/"
        path = path.stringByReplacingOccurrencesOfString("{allianceId}", withString: "\(allianceId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Int32]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesAllianceIdIcons: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get alliance icon
     
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlliancesAllianceIdIcons(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceIdIcons? = nil, completion: ((data: GetAlliancesAllianceIdIconsOk?, error: ErrorType?) -> Void)) {
        getAlliancesAllianceIdIconsWithRequestBuilder(allianceId: allianceId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get alliance icon
     - GET /alliances/{allianceId}/icons/
     - Get the icon urls for a alliance  ---  Alternate route: `/v1/alliances/{alliance_id}/icons/`  Alternate route: `/legacy/alliances/{alliance_id}/icons/`  Alternate route: `/dev/alliances/{alliance_id}/icons/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "px128x128" : "https://imageserver.eveonline.com/Alliance/503818424_128.png",
  "px64x64" : "https://imageserver.eveonline.com/Alliance/503818424_64.png"
}}]
     
     - parameter allianceId: (path) An EVE alliance ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetAlliancesAllianceIdIconsOk> 
     */
    public class func getAlliancesAllianceIdIconsWithRequestBuilder(allianceId allianceId: Int32, datasource: Datasource_getAlliancesAllianceIdIcons? = nil) -> RequestBuilder<GetAlliancesAllianceIdIconsOk> {
        var path = "/alliances/{allianceId}/icons/"
        path = path.stringByReplacingOccurrencesOfString("{allianceId}", withString: "\(allianceId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetAlliancesAllianceIdIconsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getAlliancesNames: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get alliance names
     
     - parameter allianceIds: (query) A comma separated list of alliance IDs 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAlliancesNames(allianceIds allianceIds: [Int64], datasource: Datasource_getAlliancesNames? = nil, completion: ((data: [GetAlliancesNames200Ok]?, error: ErrorType?) -> Void)) {
        getAlliancesNamesWithRequestBuilder(allianceIds: allianceIds, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get alliance names
     - GET /alliances/names/
     - Resolve a set of alliance IDs to alliance names  ---  Alternate route: `/v1/alliances/names/`  Alternate route: `/legacy/alliances/names/`  Alternate route: `/dev/alliances/names/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "alliance_id" : 1000171,
  "alliance_name" : "Republic University"
} ]}]
     
     - parameter allianceIds: (query) A comma separated list of alliance IDs 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetAlliancesNames200Ok]> 
     */
    public class func getAlliancesNamesWithRequestBuilder(allianceIds allianceIds: [Int64], datasource: Datasource_getAlliancesNames? = nil) -> RequestBuilder<[GetAlliancesNames200Ok]> {
        let path = "/alliances/names/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "alliance_ids": allianceIds,
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetAlliancesNames200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
