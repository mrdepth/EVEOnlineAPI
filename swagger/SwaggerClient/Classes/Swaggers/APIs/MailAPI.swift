//
// MailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MailAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_deleteCharactersCharacterIdMailMailId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Delete a mail
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteCharactersCharacterIdMailMailId(characterId characterId: Int32, mailId: Int32, datasource: Datasource_deleteCharactersCharacterIdMailMailId? = nil, completion: ((error: ErrorType?) -> Void)) {
        deleteCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: characterId, mailId: mailId, datasource: datasource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete a mail
     - DELETE /characters/{characterId}/mail/{mailId}/
     - Delete a mail  ---  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<Void> 
     */
    public class func deleteCharactersCharacterIdMailMailIdWithRequestBuilder(characterId characterId: Int32, mailId: Int32, datasource: Datasource_deleteCharactersCharacterIdMailMailId? = nil) -> RequestBuilder<Void> {
        var path = "/characters/{characterId}/mail/{mailId}/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{mailId}", withString: "\(mailId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMail: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Return mail headers
     
     - parameter characterId: (path) An EVE character ID 
     - parameter labels: (query) Fetch only mails that match one or more of the given labels (optional)
     - parameter lastMailId: (query) List only mail with an ID lower than the given ID, if present (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdMail(characterId characterId: Int32, labels: [Int64]? = nil, lastMailId: Int32? = nil, datasource: Datasource_getCharactersCharacterIdMail? = nil, completion: ((data: [GetCharactersCharacterIdMail200Ok]?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdMailWithRequestBuilder(characterId: characterId, labels: labels, lastMailId: lastMailId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Return mail headers
     - GET /characters/{characterId}/mail/
     - Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.  ---  Alternate route: `/v1/characters/{character_id}/mail/`  Alternate route: `/legacy/characters/{character_id}/mail/`  Alternate route: `/dev/characters/{character_id}/mail/`   ---  This route is cached for up to 30 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "from" : 90000001,
  "is_read" : true,
  "labels" : [ 3 ],
  "mail_id" : 7,
  "recipients" : [ {
    "recipient_id" : 90000002,
    "recipient_type" : "character"
  } ],
  "subject" : "Title for EVE Mail",
  "timestamp" : "2015-09-30T16:07:00Z"
} ]}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter labels: (query) Fetch only mails that match one or more of the given labels (optional)
     - parameter lastMailId: (query) List only mail with an ID lower than the given ID, if present (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetCharactersCharacterIdMail200Ok]> 
     */
    public class func getCharactersCharacterIdMailWithRequestBuilder(characterId characterId: Int32, labels: [Int64]? = nil, lastMailId: Int32? = nil, datasource: Datasource_getCharactersCharacterIdMail? = nil) -> RequestBuilder<[GetCharactersCharacterIdMail200Ok]> {
        var path = "/characters/{characterId}/mail/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "labels": labels,
            "last_mail_id": lastMailId?.encodeToJSON(),
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMail200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailLabels: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get mail labels and unread counts
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdMailLabels(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdMailLabels? = nil, completion: ((data: GetCharactersCharacterIdMailLabelsOk?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdMailLabelsWithRequestBuilder(characterId: characterId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get mail labels and unread counts
     - GET /characters/{characterId}/mail/labels/
     - Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  Alternate route: `/v3/characters/{character_id}/mail/labels/`  Alternate route: `/dev/characters/{character_id}/mail/labels/`   ---  This route is cached for up to 30 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "labels" : [ {
    "color_hex" : "#660066",
    "label_id" : 16,
    "name" : "PINK",
    "unread_count" : 4
  }, {
    "color_hex" : "#ffffff",
    "label_id" : 17,
    "name" : "WHITE",
    "unread_count" : 1
  } ],
  "total_unread_count" : 5
}}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetCharactersCharacterIdMailLabelsOk> 
     */
    public class func getCharactersCharacterIdMailLabelsWithRequestBuilder(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdMailLabels? = nil) -> RequestBuilder<GetCharactersCharacterIdMailLabelsOk> {
        var path = "/characters/{characterId}/mail/labels/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetCharactersCharacterIdMailLabelsOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailLists: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Return mailing list subscriptions
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdMailLists(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdMailLists? = nil, completion: ((data: [GetCharactersCharacterIdMailLists200Ok]?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdMailListsWithRequestBuilder(characterId: characterId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Return mailing list subscriptions
     - GET /characters/{characterId}/mail/lists/
     - Return all mailing lists that the character is subscribed to   ---  Alternate route: `/v1/characters/{character_id}/mail/lists/`  Alternate route: `/legacy/characters/{character_id}/mail/lists/`  Alternate route: `/dev/characters/{character_id}/mail/lists/`   ---  This route is cached for up to 120 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "mailing_list_id" : 1,
  "name" : "test_mailing_list"
} ]}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]> 
     */
    public class func getCharactersCharacterIdMailListsWithRequestBuilder(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdMailLists? = nil) -> RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]> {
        var path = "/characters/{characterId}/mail/lists/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdMailLists200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdMailMailId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Return a mail
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdMailMailId(characterId characterId: Int32, mailId: Int32, datasource: Datasource_getCharactersCharacterIdMailMailId? = nil, completion: ((data: GetCharactersCharacterIdMailMailIdOk?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: characterId, mailId: mailId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Return a mail
     - GET /characters/{characterId}/mail/{mailId}/
     - Return the contents of an EVE mail  ---  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`   ---  This route is cached for up to 30 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "body" : "blah blah blah",
  "from" : 90000001,
  "labels" : [ 2, 32 ],
  "read" : false,
  "subject" : "test",
  "timestamp" : "2015-09-30T16:07:00Z"
}}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetCharactersCharacterIdMailMailIdOk> 
     */
    public class func getCharactersCharacterIdMailMailIdWithRequestBuilder(characterId characterId: Int32, mailId: Int32, datasource: Datasource_getCharactersCharacterIdMailMailId? = nil) -> RequestBuilder<GetCharactersCharacterIdMailMailIdOk> {
        var path = "/characters/{characterId}/mail/{mailId}/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{mailId}", withString: "\(mailId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetCharactersCharacterIdMailMailIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdMail: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Send a new mail
     
     - parameter characterId: (path) The sender&#39;s character ID 
     - parameter mail: (body) The mail to send 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postCharactersCharacterIdMail(characterId characterId: Int32, mail: PostCharactersCharacterIdMailMail, datasource: Datasource_postCharactersCharacterIdMail? = nil, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        postCharactersCharacterIdMailWithRequestBuilder(characterId: characterId, mail: mail, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Send a new mail
     - POST /characters/{characterId}/mail/
     - Create and send a new mail  ---  Alternate route: `/v1/characters/{character_id}/mail/`  Alternate route: `/legacy/characters/{character_id}/mail/`  Alternate route: `/dev/characters/{character_id}/mail/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example=13}]
     
     - parameter characterId: (path) The sender&#39;s character ID 
     - parameter mail: (body) The mail to send 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<Int32> 
     */
    public class func postCharactersCharacterIdMailWithRequestBuilder(characterId characterId: Int32, mail: PostCharactersCharacterIdMailMail, datasource: Datasource_postCharactersCharacterIdMail? = nil) -> RequestBuilder<Int32> {
        var path = "/characters/{characterId}/mail/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = mail.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_postCharactersCharacterIdMailLabels: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Create a mail label
     
     - parameter characterId: (path) An EVE character ID 
     - parameter label: (body) Label to create (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postCharactersCharacterIdMailLabels(characterId characterId: Int32, label: PostCharactersCharacterIdMailLabelsLabel? = nil, datasource: Datasource_postCharactersCharacterIdMailLabels? = nil, completion: ((data: Int64?, error: ErrorType?) -> Void)) {
        postCharactersCharacterIdMailLabelsWithRequestBuilder(characterId: characterId, label: label, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create a mail label
     - POST /characters/{characterId}/mail/labels/
     - Create a mail label  ---  Alternate route: `/v2/characters/{character_id}/mail/labels/`  Alternate route: `/legacy/characters/{character_id}/mail/labels/`  Alternate route: `/dev/characters/{character_id}/mail/labels/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example=128}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter label: (body) Label to create (optional)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<Int64> 
     */
    public class func postCharactersCharacterIdMailLabelsWithRequestBuilder(characterId characterId: Int32, label: PostCharactersCharacterIdMailLabelsLabel? = nil, datasource: Datasource_postCharactersCharacterIdMailLabels? = nil) -> RequestBuilder<Int64> {
        var path = "/characters/{characterId}/mail/labels/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = label?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int64>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_putCharactersCharacterIdMailMailId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Update metadata about a mail
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter contents: (body) Data used to update the mail 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func putCharactersCharacterIdMailMailId(characterId characterId: Int32, mailId: Int32, contents: PutCharactersCharacterIdMailMailIdContents, datasource: Datasource_putCharactersCharacterIdMailMailId? = nil, completion: ((error: ErrorType?) -> Void)) {
        putCharactersCharacterIdMailMailIdWithRequestBuilder(characterId: characterId, mailId: mailId, contents: contents, datasource: datasource).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update metadata about a mail
     - PUT /characters/{characterId}/mail/{mailId}/
     - Update metadata about a mail  ---  Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`  Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     
     - parameter characterId: (path) An EVE character ID 
     - parameter mailId: (path) An EVE mail ID 
     - parameter contents: (body) Data used to update the mail 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<Void> 
     */
    public class func putCharactersCharacterIdMailMailIdWithRequestBuilder(characterId characterId: Int32, mailId: Int32, contents: PutCharactersCharacterIdMailMailIdContents, datasource: Datasource_putCharactersCharacterIdMailMailId? = nil) -> RequestBuilder<Void> {
        var path = "/characters/{characterId}/mail/{mailId}/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{mailId}", withString: "\(mailId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = contents.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
