//
// BookmarksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class BookmarksAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdBookmarks: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List bookmarks
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdBookmarks(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdBookmarks? = nil, completion: ((data: [GetCharactersCharacterIdBookmarks200Ok]?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdBookmarksWithRequestBuilder(characterId: characterId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List bookmarks
     - GET /characters/{characterId}/bookmarks/
     - List your character's personal bookmarks  ---  Alternate route: `/v1/characters/{character_id}/bookmarks/`  Alternate route: `/legacy/characters/{character_id}/bookmarks/`  Alternate route: `/dev/characters/{character_id}/bookmarks/`   ---  This route is cached for up to 3600 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "bookmark_id" : 32,
  "create_date" : "2016-08-09T11:57:47Z",
  "creator_id" : 90000001,
  "folder_id" : 5,
  "memo" : "aoeu ( Citadel )",
  "note" : "",
  "owner_id" : 90000001,
  "target" : {
    "item" : {
      "item_id" : 1000000012668,
      "type_id" : 35832
    },
    "location_id" : 30000005
  }
} ]}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]> 
     */
    public class func getCharactersCharacterIdBookmarksWithRequestBuilder(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdBookmarks? = nil) -> RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]> {
        var path = "/characters/{characterId}/bookmarks/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdBookmarks200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getCharactersCharacterIdBookmarksFolders: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List bookmark folders
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getCharactersCharacterIdBookmarksFolders(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdBookmarksFolders? = nil, completion: ((data: [GetCharactersCharacterIdBookmarksFolders200Ok]?, error: ErrorType?) -> Void)) {
        getCharactersCharacterIdBookmarksFoldersWithRequestBuilder(characterId: characterId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List bookmark folders
     - GET /characters/{characterId}/bookmarks/folders/
     - List your character's personal bookmark folders  ---  Alternate route: `/v1/characters/{character_id}/bookmarks/folders/`  Alternate route: `/legacy/characters/{character_id}/bookmarks/folders/`  Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`   ---  This route is cached for up to 3600 seconds
     - OAuth:
       - type: oauth2
       - name: evesso
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "folder_id" : 5,
  "name" : "Icecream",
  "owner_id" : 90000001
} ]}]
     
     - parameter characterId: (path) An EVE character ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]> 
     */
    public class func getCharactersCharacterIdBookmarksFoldersWithRequestBuilder(characterId characterId: Int32, datasource: Datasource_getCharactersCharacterIdBookmarksFolders? = nil) -> RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]> {
        var path = "/characters/{characterId}/bookmarks/folders/"
        path = path.stringByReplacingOccurrencesOfString("{characterId}", withString: "\(characterId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetCharactersCharacterIdBookmarksFolders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
