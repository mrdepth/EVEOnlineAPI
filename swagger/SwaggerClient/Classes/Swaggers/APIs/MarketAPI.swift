//
// MarketAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MarketAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsPrices: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List market prices
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMarketsPrices(datasource datasource: Datasource_getMarketsPrices? = nil, completion: ((data: [GetMarketsPrices200Ok]?, error: ErrorType?) -> Void)) {
        getMarketsPricesWithRequestBuilder(datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List market prices
     - GET /markets/prices/
     - Return a list of prices  ---  Alternate route: `/v1/markets/prices/`  Alternate route: `/legacy/markets/prices/`  Alternate route: `/dev/markets/prices/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "adjusted_price" : 306988.09,
  "average_price" : 306292.67,
  "type_id" : 32772
} ]}]
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetMarketsPrices200Ok]> 
     */
    public class func getMarketsPricesWithRequestBuilder(datasource datasource: Datasource_getMarketsPrices? = nil) -> RequestBuilder<[GetMarketsPrices200Ok]> {
        let path = "/markets/prices/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetMarketsPrices200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsRegionIdHistory: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List historical market statistics in a region
     
     - parameter regionId: (path) Return statistics in this region 
     - parameter typeId: (query) Return statistics for this type 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMarketsRegionIdHistory(regionId regionId: Int32, typeId: Int32, datasource: Datasource_getMarketsRegionIdHistory? = nil, completion: ((data: [GetMarketsRegionIdHistory200Ok]?, error: ErrorType?) -> Void)) {
        getMarketsRegionIdHistoryWithRequestBuilder(regionId: regionId, typeId: typeId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List historical market statistics in a region
     - GET /markets/{regionId}/history/
     - Return a list of historical market statistics for the specified type in a region  ---  Alternate route: `/v1/markets/{region_id}/history/`  Alternate route: `/legacy/markets/{region_id}/history/`  Alternate route: `/dev/markets/{region_id}/history/`   ---  This route is cached for up to 300 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "average" : 5.25,
  "date" : "2015-05-01",
  "highest" : 5.27,
  "lowest" : 5.11,
  "order_count" : 2267,
  "volume" : 16276782035
} ]}]
     
     - parameter regionId: (path) Return statistics in this region 
     - parameter typeId: (query) Return statistics for this type 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetMarketsRegionIdHistory200Ok]> 
     */
    public class func getMarketsRegionIdHistoryWithRequestBuilder(regionId regionId: Int32, typeId: Int32, datasource: Datasource_getMarketsRegionIdHistory? = nil) -> RequestBuilder<[GetMarketsRegionIdHistory200Ok]> {
        var path = "/markets/{regionId}/history/"
        path = path.stringByReplacingOccurrencesOfString("{regionId}", withString: "\(regionId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "type_id": typeId.encodeToJSON(),
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetMarketsRegionIdHistory200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter orderType
     */
    public enum OrderType_getMarketsRegionIdOrders: String { 
        case Buy = "buy"
        case Sell = "sell"
        case All = "all"
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getMarketsRegionIdOrders: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List orders in a region
     
     - parameter regionId: (path) Return orders in this region 
     - parameter orderType: (query) Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.  
     - parameter typeId: (query) Return orders only for this type (optional)
     - parameter page: (query) Which page to query, only used for querying without type_id. Starting at 1  (optional, default to 1)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMarketsRegionIdOrders(regionId regionId: Int32, orderType: OrderType_getMarketsRegionIdOrders, typeId: Int32? = nil, page: Int32? = nil, datasource: Datasource_getMarketsRegionIdOrders? = nil, completion: ((data: [GetMarketsRegionIdOrders200Ok]?, error: ErrorType?) -> Void)) {
        getMarketsRegionIdOrdersWithRequestBuilder(regionId: regionId, orderType: orderType, typeId: typeId, page: page, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List orders in a region
     - GET /markets/{regionId}/orders/
     - Return a list of orders in a region  ---  Alternate route: `/v1/markets/{region_id}/orders/`  Alternate route: `/legacy/markets/{region_id}/orders/`  Alternate route: `/dev/markets/{region_id}/orders/`   ---  This route is cached for up to 300 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ {
  "duration" : 90,
  "is_buy_order" : false,
  "issued" : "2016-09-03T05:12:25Z",
  "location_id" : 60005599,
  "min_volume" : 1,
  "order_id" : 4623824223,
  "price" : 9.9,
  "range" : "region",
  "type_id" : 34,
  "volume_remain" : 1296000,
  "volume_total" : 2000000
} ]}]
     
     - parameter regionId: (path) Return orders in this region 
     - parameter orderType: (query) Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.  
     - parameter typeId: (query) Return orders only for this type (optional)
     - parameter page: (query) Which page to query, only used for querying without type_id. Starting at 1  (optional, default to 1)
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[GetMarketsRegionIdOrders200Ok]> 
     */
    public class func getMarketsRegionIdOrdersWithRequestBuilder(regionId regionId: Int32, orderType: OrderType_getMarketsRegionIdOrders, typeId: Int32? = nil, page: Int32? = nil, datasource: Datasource_getMarketsRegionIdOrders? = nil) -> RequestBuilder<[GetMarketsRegionIdOrders200Ok]> {
        var path = "/markets/{regionId}/orders/"
        path = path.stringByReplacingOccurrencesOfString("{regionId}", withString: "\(regionId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "type_id": typeId?.encodeToJSON(),
            "order_type": orderType.rawValue,
            "page": page?.encodeToJSON(),
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[GetMarketsRegionIdOrders200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
