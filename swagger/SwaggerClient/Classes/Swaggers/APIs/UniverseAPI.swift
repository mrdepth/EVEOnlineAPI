//
// UniverseAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UniverseAPI: APIBase {
    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStationsStationId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get station information
     
     - parameter stationId: (path) An Eve station ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniverseStationsStationId(stationId stationId: Int32, datasource: Datasource_getUniverseStationsStationId? = nil, completion: ((data: GetUniverseStationsStationIdOk?, error: ErrorType?) -> Void)) {
        getUniverseStationsStationIdWithRequestBuilder(stationId: stationId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get station information
     - GET /universe/stations/{stationId}/
     - Public information on stations  ---  Alternate route: `/v1/universe/stations/{station_id}/`  Alternate route: `/legacy/universe/stations/{station_id}/`  Alternate route: `/dev/universe/stations/{station_id}/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "solar_system_id" : 30000142,
  "station_name" : "Jita IV Moon IV - Caldari Navy Assembly Plant"
}}]
     
     - parameter stationId: (path) An Eve station ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetUniverseStationsStationIdOk> 
     */
    public class func getUniverseStationsStationIdWithRequestBuilder(stationId stationId: Int32, datasource: Datasource_getUniverseStationsStationId? = nil) -> RequestBuilder<GetUniverseStationsStationIdOk> {
        var path = "/universe/stations/{stationId}/"
        path = path.stringByReplacingOccurrencesOfString("{stationId}", withString: "\(stationId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetUniverseStationsStationIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStructures: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     List all public structures
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniverseStructures(datasource datasource: Datasource_getUniverseStructures? = nil, completion: ((data: [Int64]?, error: ErrorType?) -> Void)) {
        getUniverseStructuresWithRequestBuilder(datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List all public structures
     - GET /universe/structures/
     - List all public structures  ---  Alternate route: `/v1/universe/structures/`  Alternate route: `/legacy/universe/structures/`  Alternate route: `/dev/universe/structures/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example=[ 1000000017013, 1000000025062 ]}]
     
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[Int64]> 
     */
    public class func getUniverseStructuresWithRequestBuilder(datasource datasource: Datasource_getUniverseStructures? = nil) -> RequestBuilder<[Int64]> {
        let path = "/universe/structures/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Int64]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseStructuresStructureId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get structure information
     
     - parameter structureId: (path) An Eve structure ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniverseStructuresStructureId(structureId structureId: Int64, datasource: Datasource_getUniverseStructuresStructureId? = nil, completion: ((data: GetUniverseStructuresStructureIdOk?, error: ErrorType?) -> Void)) {
        getUniverseStructuresStructureIdWithRequestBuilder(structureId: structureId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get structure information
     - GET /universe/structures/{structureId}/
     - Returns information on requested structure, if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  ---  Alternate route: `/v1/universe/structures/{structure_id}/`  Alternate route: `/legacy/universe/structures/{structure_id}/`  Alternate route: `/dev/universe/structures/{structure_id}/` 
     - OAuth:
       - type: oauth2
       - name: evesso
     - examples: [{contentType=application/json, example={
  "name" : "V-3YG7 VI - The Capital",
  "solar_system_id" : 30000142
}}]
     
     - parameter structureId: (path) An Eve structure ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetUniverseStructuresStructureIdOk> 
     */
    public class func getUniverseStructuresStructureIdWithRequestBuilder(structureId structureId: Int64, datasource: Datasource_getUniverseStructuresStructureId? = nil) -> RequestBuilder<GetUniverseStructuresStructureIdOk> {
        var path = "/universe/structures/{structureId}/"
        path = path.stringByReplacingOccurrencesOfString("{structureId}", withString: "\(structureId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetUniverseStructuresStructureIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseSystemsSystemId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get solar system information
     
     - parameter systemId: (path) An Eve solar system ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniverseSystemsSystemId(systemId systemId: Int32, datasource: Datasource_getUniverseSystemsSystemId? = nil, completion: ((data: GetUniverseSystemsSystemIdOk?, error: ErrorType?) -> Void)) {
        getUniverseSystemsSystemIdWithRequestBuilder(systemId: systemId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get solar system information
     - GET /universe/systems/{systemId}/
     - Information on solar systems  ---  Alternate route: `/v1/universe/systems/{system_id}/`  Alternate route: `/legacy/universe/systems/{system_id}/`  Alternate route: `/dev/universe/systems/{system_id}/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "solar_system_name" : "Jita"
}}]
     
     - parameter systemId: (path) An Eve solar system ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetUniverseSystemsSystemIdOk> 
     */
    public class func getUniverseSystemsSystemIdWithRequestBuilder(systemId systemId: Int32, datasource: Datasource_getUniverseSystemsSystemId? = nil) -> RequestBuilder<GetUniverseSystemsSystemIdOk> {
        var path = "/universe/systems/{systemId}/"
        path = path.stringByReplacingOccurrencesOfString("{systemId}", withString: "\(systemId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetUniverseSystemsSystemIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_getUniverseTypesTypeId: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get type information
     
     - parameter typeId: (path) An Eve item type ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUniverseTypesTypeId(typeId typeId: Int32, datasource: Datasource_getUniverseTypesTypeId? = nil, completion: ((data: GetUniverseTypesTypeIdOk?, error: ErrorType?) -> Void)) {
        getUniverseTypesTypeIdWithRequestBuilder(typeId: typeId, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get type information
     - GET /universe/types/{typeId}/
     - Get information on a type  ---  Alternate route: `/v1/universe/types/{type_id}/`  Alternate route: `/legacy/universe/types/{type_id}/`  Alternate route: `/dev/universe/types/{type_id}/`   ---  This route is cached for up to 3600 seconds
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - responseHeaders: [Cache-Control(String), Expires(String), Last-Modified(String)]
     - examples: [{contentType=application/json, example={
  "category_id" : 6,
  "graphic_id" : 46,
  "group_id" : 25,
  "type_description" : "The Rifter is a very powerful combat frigate and can easily tackle the best frigates out there. It has gone through many radical design phases since its inauguration during the Minmatar Rebellion. The Rifter has a wide variety of offensive capabilities, making it an unpredictable and deadly adversary.",
  "type_name" : "Rifter"
}}]
     
     - parameter typeId: (path) An Eve item type ID 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<GetUniverseTypesTypeIdOk> 
     */
    public class func getUniverseTypesTypeIdWithRequestBuilder(typeId typeId: Int32, datasource: Datasource_getUniverseTypesTypeId? = nil) -> RequestBuilder<GetUniverseTypesTypeIdOk> {
        var path = "/universe/types/{typeId}/"
        path = path.stringByReplacingOccurrencesOfString("{typeId}", withString: "\(typeId)", options: .LiteralSearch, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "datasource": datasource?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<GetUniverseTypesTypeIdOk>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter datasource
     */
    public enum Datasource_postUniverseNames: String { 
        case Tranquility = "tranquility"
        case Singularity = "singularity"
    }

    /**
     Get names and categories for a set of ID's
     
     - parameter ids: (body) The ids to resolve 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postUniverseNames(ids ids: PostUniverseNamesIds, datasource: Datasource_postUniverseNames? = nil, completion: ((data: [PostUniverseNames200Ok]?, error: ErrorType?) -> Void)) {
        postUniverseNamesWithRequestBuilder(ids: ids, datasource: datasource).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get names and categories for a set of ID's
     - POST /universe/names/
     - Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  ---  Alternate route: `/v1/universe/names/`  Alternate route: `/legacy/universe/names/` 
     - examples: [{contentType=application/json, example=[ {
  "category" : "character",
  "id" : 95465499,
  "name" : "CCP Bartender"
}, {
  "category" : "solar_system",
  "id" : 30000142,
  "name" : "Jita"
} ]}]
     
     - parameter ids: (body) The ids to resolve 
     - parameter datasource: (query) The server name you would like data from (optional, default to tranquility)

     - returns: RequestBuilder<[PostUniverseNames200Ok]> 
     */
    public class func postUniverseNamesWithRequestBuilder(ids ids: PostUniverseNamesIds, datasource: Datasource_postUniverseNames? = nil) -> RequestBuilder<[PostUniverseNames200Ok]> {
        let path = "/universe/names/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = ids.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[PostUniverseNames200Ok]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
