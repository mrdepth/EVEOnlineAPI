//
// GetCharactersCharacterIdSearchOk.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** 200 ok object */
public class GetCharactersCharacterIdSearchOk: JSONEncodable {
    /** agent array */
    public var agent: [Int32]?
    /** alliance array */
    public var alliance: [Int32]?
    /** character array */
    public var character: [Int32]?
    /** constellation array */
    public var constellation: [Int32]?
    /** corporation array */
    public var corporation: [Int32]?
    /** faction array */
    public var faction: [Int32]?
    /** inventorytype array */
    public var inventorytype: [Int32]?
    /** region array */
    public var region: [Int32]?
    /** solarsystem array */
    public var solarsystem: [Int32]?
    /** station array */
    public var station: [Int32]?
    /** structure array */
    public var structure: [Int64]?
    /** wormhole array */
    public var wormhole: [Int32]?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["agent"] = self.agent?.encodeToJSON()
        nillableDictionary["alliance"] = self.alliance?.encodeToJSON()
        nillableDictionary["character"] = self.character?.encodeToJSON()
        nillableDictionary["constellation"] = self.constellation?.encodeToJSON()
        nillableDictionary["corporation"] = self.corporation?.encodeToJSON()
        nillableDictionary["faction"] = self.faction?.encodeToJSON()
        nillableDictionary["inventorytype"] = self.inventorytype?.encodeToJSON()
        nillableDictionary["region"] = self.region?.encodeToJSON()
        nillableDictionary["solarsystem"] = self.solarsystem?.encodeToJSON()
        nillableDictionary["station"] = self.station?.encodeToJSON()
        nillableDictionary["structure"] = self.structure?.encodeToJSON()
        nillableDictionary["wormhole"] = self.wormhole?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
