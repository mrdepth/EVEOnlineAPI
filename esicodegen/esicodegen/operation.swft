	@discardableResult
	public func {operation}({definitions}) -> Future<ESI.Result<{result}>> {

{security}
{body}

		var headers = HTTPHeaders()
		headers["Accept"] = "application/json"
{headers}

		var query = [URLQueryItem]()
		query.append(URLQueryItem(name: "datasource", value: esi.server.rawValue))
{queries}

		let url = esi.baseURL + "{url}"
		let components = NSURLComponents(string: url)!
		components.queryItems = query

		let promise = Promise<ESI.Result<{result}>>()
		esi.request(components.url!, method: .{method}, encoding: body ?? URLEncoding.default, headers: headers, cachePolicy: cachePolicy).validateESI().responseESI { (response: DataResponse<{result}, Error>) in
			promise.set(response: response, cached: {cached})
		}
		return promise.future
	}
