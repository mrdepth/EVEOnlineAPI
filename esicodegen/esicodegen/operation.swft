	@discardableResult
	public func {operation}({definitions}) -> Future<ESI.Result<{result}>> {
		var esi = self.esi
		guard esi != nil else { return .init(.failure(ESIError.internalError)) }

{security}
{body}

		var headers = HTTPHeaders()
		headers["Accept"] = "application/json"
{headers}

		var query = [URLQueryItem]()
		query.append(URLQueryItem(name: "datasource", value: esi!.server.rawValue))
{queries}

		let url = esi!.baseURL + "/v1/status/"
		let components = NSURLComponents(string: url)!
		components.queryItems = query

		let progress = Progress(totalUnitCount: 100)

		let promise = Promise<ESI.Result<{result}>>()
		esi!.perform { () -> DataRequest in
			return esi!.sessionManager.request(components.url!, method: .{method}, encoding: body ?? URLEncoding.default, headers: headers).downloadProgress { p in
					progress.completedUnitCount = Int64(p.fractionCompleted * 100)
				}.validateESI().responseESI { (response: DataResponse<{result}>) in
					promise.set(result: response.result, cached: {cached})
					esi = nil
				}
		}
		return promise.future
	}
