public class {className}: NSObject, NSCoding , JSONCoding {

{nested}
{definitions}
	
	public required init(json: Any) throws {
		guard let dictionary = json as? [String: Any] else {throw ESIError.invalidFormat(type(of: self), json)}
		
{initializations}

		super.init()
	}
	
	override public init() {
{defaults}

		super.init()
	}
	
	public required init?(coder aDecoder: NSCoder) {
{decodings}

		super.init()
	}
	
	public func encode(with aCoder: NSCoder) {
{encodings}
	}
	
	public var json: Any {
		var json = [String: Any]()
{json}
		return json
	}

	override public var hashValue: Int {
		var hash: Int = 0
{hash}
		return hash
	}

	public static func ==(lhs: {class}, rhs: {class}) -> Bool {
		return lhs.hashValue == rhs.hashValue
	}

}
