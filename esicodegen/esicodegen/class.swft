public class {className}: NSObject, NSSecureCoding, NSCopying, JSONCoding {

{nested}
{definitions}

	public static var supportsSecureCoding: Bool {
		return true
	}

	public required init(json: Any) throws {
		guard let dictionary = json as? [String: Any] else {throw ESIError.invalidFormat(type(of: self), json)}
		
{initializations}

		super.init()
	}
	
	override public init() {
		super.init()
	}
	
	public required init?(coder aDecoder: NSCoder) {
{decodings}

		super.init()
	}
	
	public func encode(with aCoder: NSCoder) {
{encodings}
	}
	
	public var json: Any {
		var json = [String: Any]()
{json}
		return json
	}

	private lazy var _hashValue: Int = {
		var hash: Int = 0
{hash}
		return hash
	}()

	override public var hashValue: Int {
		return _hashValue
	}

	public static func ==(lhs: {class}, rhs: {class}) -> Bool {
		return lhs.hashValue == rhs.hashValue
	}

	init(_ other: {classIdentifier}) {
{copy}
	}

	public func copy(with zone: NSZone? = nil) -> Any {
		return {classIdentifier}(self)
	}


	public override func isEqual(_ object: Any?) -> Bool {
		return (object as? {className})?.hashValue == hashValue
	}

}
